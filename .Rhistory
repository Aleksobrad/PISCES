pheatmap(marker.vip[, names(sort(gsea.clust$clustering)) ], main = 'Mouse GSEA Clust', width = 6, height = 8, scale = 'row',
cluster_rows = FALSE, cluster_cols = FALSE, show_rownames = TRUE, show_colnames = FALSE,
color = colorRampPalette(colors = c('blue', 'white', 'red'))(100),  fontsize_row = 8,
annotation_col = annot.df)
## pheatmap
annot.df <- data.frame('clust' = as.factor(gsea.clust.human$clustering), 'Cxcr7' = cpm.human.mat['ACKR3', names(gsea.clust.human$clustering)])
pheatmap(marker.human.vip[, names(sort(gsea.clust.human$clustering)) ], main = 'Human GSEA Clust', width = 6, height = 8, scale = 'row',
cluster_rows = FALSE, cluster_cols = FALSE, show_rownames = TRUE, show_colnames = FALSE,
color = colorRampPalette(colors = c('blue', 'white', 'red'))(100),  fontsize_row = 8,
annotation_col = annot.df)
## pheatmap
annot.df <- data.frame('clust' = as.factor(gsea.clust.human$clustering), 'Cxcr7' = cpm.human.mat['ACKR3', names(gsea.clust.human$clustering)])
## pheatmap
annot.df <- data.frame('clust' = as.factor(gsea.clust.human$clustering), 'Cxcr7' = cpm.human.mat['ACKR3', ])
dim(marker.human.vip)
dim(cpm.human.mat)
## create human marker set
marker.human.reg <- list()
for (m in names(marker.sets)) {
m.set <- marker.sets[[m]]
m.set <- intersect(m.set, rownames(rank.human.mat))
marker.human.reg[[as.character(m)]] <- MakeReg(m.set)
}
class(marker.human.reg) <- "regulon"
marker.human.vip <- viper(rank.human.mat, marker.reg, method = 'none', minsize = 1)
m.set
marker.human.vip <- viper(rank.human.mat, marker.human.reg, method = 'none', minsize = 1)
## clustering
gsea.clust.human <- pam(t(marker.human.vip), k = 5)
## pheatmap
annot.df <- data.frame('clust' = as.factor(gsea.clust.human$clustering), 'Cxcr7' = cpm.human.mat['ACKR3', ])
pheatmap(marker.human.vip[, names(sort(gsea.clust.human$clustering)) ], main = 'Human GSEA Clust', width = 6, height = 8, scale = 'row',
cluster_rows = FALSE, cluster_cols = FALSE, show_rownames = TRUE, show_colnames = FALSE,
color = colorRampPalette(colors = c('blue', 'white', 'red'))(100),  fontsize_row = 8,
annotation_col = annot.df)
## get average expression for each clsuter
for (i in 1:5) {
clust.cells <- which(gsea.clust$clustering == i)
mean.exp <- mean(cpm.mat['ENSMUSG00000044337', clust.cells])
print(mean.exp)
}
## get average expression for each clsuter
for (i in 1:5) {
clust.cells <- which(gsea.clust.human$clustering == i)
mean.exp <- mean(cpm.human.mat['ENSMUSG00000044337', clust.cells])
print(mean.exp)
}
## get average expression for each clsuter
for (i in 1:5) {
clust.cells <- which(gsea.clust.human$clustering == i)
mean.exp <- mean(cpm.human.mat['ACKR3', clust.cells])
print(mean.exp)
}
### MOUSE ###
raw.mat <- readRDS('C://Users/lvlah/linux/ac_lab/data/pda_olive/mouse-pda_raw.rds')
cpm.mat <- readRDS('C://Users/lvlah/linux/ac_lab/data/pda_olive/mouse-pda_cpm.rds')
rank.mat <- readRDS('C://Users/lvlah/linux/ac_lab/data/pda_olive/mouse-pda_rank.rds')
'Rdc1' %in% rownames(cpm.mat)
'Cxcr7' %in% rownames(cpm.mat)
head(rownames(cpm.mat))
'Cxcr7' %in% rownames(raw.mat)
'Rdc1' %in% rownames(raw.mat)
'Ackr3' %in% rownames(raw.mat)
'Ackr3' %in% rownames(cpm.mat)
?viperSignature
source('C://Users/lvlah/linux/ac_lab/single-cell-pipeline/functions/process-utils.R')
source('C://Users/lvlah/linux/ac_lab/single-cell-pipeline/functions/cluster-functions.R')
source('C://Users/lvlah/linux/ac_lab/single-cell-pipeline/functions/viper-utils.R')
source('C://Users/lvlah/linux/ac_lab/single-cell-pipeline/functions/process-utils.R')
source('C://Users/lvlah/linux/ac_lab/single-cell-pipeline/functions/cluster-functions.R')
source('C://Users/lvlah/linux/ac_lab/single-cell-pipeline/functions/viper-utils.R')
## PIPELINE r2
r2.pAct <- readRDS('C://Users/lvlah/linux/ac_lab/data/pda_olive/mps_r2-pAct.rds')
r2.cbcMRs <- CBCMRs(r2.pAct) # identify the most representative proteins
r2.pAct.cbc <- r2.pAct[ r2.cbcMRs ,] # filter the protein activity matrix
r2.louvain <- LouvainClust(r2.pAct.cbc) # perform clustering analysis
r2.cbcUMAP <- CustomUMAP(r2.pAct.cbc)
ClusterScatter(r2.cbcUMAP, r2.louvain, 'Viper Clustering (Louvain)')
m.set
marker.sets
markers <- c('Ackr3', marker.sets$endothelial)
markers
markers <- c('Ackr3', lapply(marker.sets$endothelial, function(x) { paste(substr(x, 1, 1), tolower(substr(x, 2, nchar(x))), sep = '') })
)
markers
markers <- c('Ackr3', unlist( lapply(marker.sets$endothelial, function(x)
{ paste(substr(x, 1, 1), tolower(substr(x, 2, nchar(x))), sep = '') })))
markers
MarkerGrid(r2.cbcUMAP, r2.louvain, r2.pAct, markers, 'Endothelial Marker Activity')
source('C://Users/lvlah/linux/ac_lab/single-cell-pipeline/functions/process-utils.R')
source('C://Users/lvlah/linux/ac_lab/single-cell-pipeline/functions/cluster-functions.R')
source('C://Users/lvlah/linux/ac_lab/single-cell-pipeline/functions/viper-utils.R')
MarkerGrid(r2.cbcUMAP, r2.louvain, r2.pAct, markers, 'Endothelial Marker Activity')
source('C://Users/lvlah/linux/ac_lab/single-cell-pipeline/functions/process-utils.R')
source('C://Users/lvlah/linux/ac_lab/single-cell-pipeline/functions/cluster-functions.R')
source('C://Users/lvlah/linux/ac_lab/single-cell-pipeline/functions/viper-utils.R')
MarkerGrid(r2.cbcUMAP, r2.louvain, r2.pAct, markers, 'Endothelial Marker Activity')
source('C://Users/lvlah/linux/ac_lab/single-cell-pipeline/functions/process-utils.R')
source('C://Users/lvlah/linux/ac_lab/single-cell-pipeline/functions/cluster-functions.R')
source('C://Users/lvlah/linux/ac_lab/single-cell-pipeline/functions/viper-utils.R')
MarkerGrid(r2.cbcUMAP, r2.louvain, r2.pAct, markers, 'Endothelial Marker Activity')
dev.off()
MarkerGrid(r2.cbcUMAP, r2.louvain, r2.pAct, markers, 'Endothelial Marker Activity')
source('C://Users/lvlah/linux/ac_lab/single-cell-pipeline/functions/cluster-functions.R'\
source('C://Users/lvlah/linux/ac_lab/single-cell-pipeline/functions/cluster-functions.R'
)
MarkerGrid(r2.cbcUMAP, r2.louvain, r2.pAct, markers, 'Endothelial Marker Activity')
source('C://Users/lvlah/linux/ac_lab/single-cell-pipeline/functions/cluster-functions.R')
MarkerGrid(r2.cbcUMAP, r2.louvain, r2.pAct, markers, 'Endothelial Marker Activity')
length(markers)
source('C://Users/lvlah/linux/ac_lab/single-cell-pipeline/functions/cluster-functions.R')
length(markers)
MarkerGrid(r2.cbcUMAP, r2.louvain, r2.pAct, markers, 'Endothelial Marker Activity')
markers <- c('Ackr3', unlist( lapply(marker.sets$epithelial, function(x)
{ paste(substr(x, 1, 1), tolower(substr(x, 2, nchar(x))), sep = '') })))
MarkerGrid(r2.cbcUMAP, r2.louvain, r2.pAct, markers, 'Epithelial Marker Activity')
source('C://Users/lvlah/linux/ac_lab/single-cell-pipeline/functions/cluster-functions.R')
markers <- c('Ackr3', unlist( lapply(marker.sets$endothelial, function(x)
{ paste(substr(x, 1, 1), tolower(substr(x, 2, nchar(x))), sep = '') })))
MarkerGrid(r2.cbcUMAP, r2.louvain, r2.pAct, markers, 'Endothelial Marker Activity')
markers <- c('Ackr3', unlist( lapply(marker.sets$epithelial, function(x)
{ paste(substr(x, 1, 1), tolower(substr(x, 2, nchar(x))), sep = '') })))
MarkerGrid(r2.cbcUMAP, r2.louvain, r2.pAct, markers, 'Epithelial Marker Activity')
markers <- c('Ackr3', unlist( lapply(marker.sets$fibroblast, function(x)
{ paste(substr(x, 1, 1), tolower(substr(x, 2, nchar(x))), sep = '') })))
MarkerGrid(r2.cbcUMAP, r2.louvain, r2.pAct, markers, 'Fibroblast Marker Activity')
markers <- c('Ackr3', unlist( lapply(marker.sets$immune, function(x)
{ paste(substr(x, 1, 1), tolower(substr(x, 2, nchar(x))), sep = '') })))
MarkerGrid(r2.cbcUMAP, r2.louvain, r2.pAct, markers, 'Immune Marker Activity')
markers <- c('Ackr3', unlist( lapply(marker.sets$pericytes, function(x)
{ paste(substr(x, 1, 1), tolower(substr(x, 2, nchar(x))), sep = '') })))
MarkerGrid(r2.cbcUMAP, r2.louvain, r2.pAct, markers, 'Pericyte Marker Activity')
devtools::install_github("xu-lab/SLICE")
devtools::install_github("xu-lab/SLICE")
Sys.getenv("R_LIBS_USER")
##packages and wd
source('C://Users/lvlah/linux/ac_lab/single-cell-pipeline/functions/cluster-functions.R')
source('C://Users/lvlah/linux/ac_lab/single-cell-pipeline/functions/viper-utils.R')
source('C://Users/lvlah/linux/ac_lab/single-cell-pipeline/functions/process-utils.R')
mt.genes <- read.table('C://Users/lvlah/linux/ac_lab/single-cell-pipeline/mt-genes.csv',
header = TRUE, sep = ',', stringsAsFactors = FALSE)
library(SingleR)
devtools::install_github('dviraran/SingleR')
install.packages('rlang')
devtools::install_github('dviraran/SingleR')
devtools::install_github('dviraran/SingleR')
## install
library(cluster)
library(ggplot2)
library(devtools)
library(Seurat)
library(viper)
library(PISCES)
data("pbmc", package = "PISCES")
seurat.obj <- CreateSeuratObject(counts = raw.mat, project = "PBMC", min.cells = 3, min.features = 200)
mt.features <- intersect(mt.genes$hum.ensg, rownames(seurat.obj))
seurat.obj[["percent.mt"]] <- PercentageFeatureSet(object = seurat.obj, features = mt.features)
QCPlots(seurat.obj)
## filter and normalize
seurat.obj <- subset(seurat.obj, subset = nCount_RNA > 1000 & nFeature_RNA < 3000 & percent.mt < 10)
seurat.obj <- SCTransform(seurat.obj, vars.to.regress = "percent.mt", verbose = FALSE)
## run PCA and find neighbors
seurat.obj <- RunPCA(seurat.obj, verbose = FALSE)
pca.feature.num <- GetPCAFeats(seurat.obj, var.thresh = 0.9)
seurat.obj <- FindNeighbors(seurat.obj, dims = 1:num.dims)
## cluster
dist.mat <- as.dist(1 - cor(seurat.obj@assays$SCT@scale.data))
seurat.obj <- SSLouvain(seurat.obj, dist.mat)
## get seurat objects
sct.mat <- seurat.obj@assays$SCT@scale.data
count.mat <- seurat.obj@assays$RNA@counts
clust.vect <- seurat.obj@active.ident
setwd('C://Users/lvlah/linux/ac_lab/PISCES-dev/')
devtools::install()
pca.feature.num <- GetPCAFeats(seurat.obj, var.thresh = 0.9)
seurat.obj <- FindNeighbors(seurat.obj, dims = 1:num.dims)
## cluster
dist.mat <- as.dist(1 - cor(seurat.obj@assays$SCT@scale.data))
seurat.obj <- SSLouvain(seurat.obj, dist.mat)
## get seurat objects
sct.mat <- seurat.obj@assays$SCT@scale.data
count.mat <- seurat.obj@assays$RNA@counts
clust.vect <- seurat.obj@active.ident
setwd('C://Users/lvlah/linux/ac_lab/PISCES-dev/')
devtools::install()
setwd('C://Users/lvlah/linux/ac_lab/PISCES-dev/')
devtools::install()
devtools::document()
devtools::install()
library(PISCES)
pca.feature.num <- GetPCAFeats(seurat.obj, var.thresh = 0.9)
seurat.obj <- FindNeighbors(seurat.obj, dims = 1:num.dims)
## cluster
dist.mat <- as.dist(1 - cor(seurat.obj@assays$SCT@scale.data))
seurat.obj <- SSLouvain(seurat.obj, dist.mat)
## get seurat objects
sct.mat <- seurat.obj@assays$SCT@scale.data
count.mat <- seurat.obj@assays$RNA@counts
clust.vect <- seurat.obj@active.ident
seurat.obj <- FindNeighbors(seurat.obj, dims = 1:pca.feature.num)
## cluster
dist.mat <- as.dist(1 - cor(seurat.obj@assays$SCT@scale.data))
seurat.obj <- SSLouvain(seurat.obj, dist.mat)
## get seurat objects
sct.mat <- seurat.obj@assays$SCT@scale.data
count.mat <- seurat.obj@assays$RNA@counts
clust.vect <- seurat.obj@active.ident
## load networks
data("pbmc.net.list", package = "PISCES")
## run metaVIPER
pbmc.vip <- viper(sct.mat, pbmc.net.list, method = 'none')
dim(pbmc.vip)
pbmc.vip.dist <- as.dist(viperSimilarity(pbmc.vip))
## clustering analysis
vip.clust <- LouvainResRange(pbmc.vip, dist.mat = pbmc.vip.dist)
vip.clust$sils
which.max(vip.clust$sils)
## clustering analysis
vip.clust <- LouvainResRange(pbmc.vip, dist.mat = pbmc.vip.dist, rmax = 210, rstep = 20)
which.max(vip.clust$sils)
vip.clust$sils
## clustering analysis
vip.clust <- LouvainResRange(pbmc.vip, dist.mat = pbmc.vip.dist, rmax = 310, rstep = 25)
```{r, eval = FALSE}
## clustering analysis
vip.clust <- LouvainResRange(pbmc.vip, dist.mat = pbmc.vip.dist, rmax = 310, rstep = 25)
vip.clust$sils
which.max(vip.clust$sils)
opt.clust <- vip.clust$clusterings[[which.max(vip.clust$sils)]]
## MR analysis
vip.mrs <- MWUMrs(vip.mat, opt.clust)
## MR analysis
vip.mrs <- MWUMrs(pbmc.vip, opt.clust)
## visualization
vip.umap <- CustomUMAP(vip.mat)
## visualization
vip.umap <- CustomUMAP(pbmc.vip)
## scatter plot
plot.dat <- data.frame('UMAP1' = vip.umap$layout[,1], 'UMAP2' = vip.umap$layout[,2],
'Cluster' = as.factor(opt.clust))
ggplot(plot.dat, aes(UMAP1, UMAP2)) + geom_point(aes(color = Cluster)) + ggtitle('PBMC Clusters')
jpeg('C://Users/lvlah/linux/ac_lab/PISCES-dev/man/pbmc-vip-scatter.jpg', width = 750, height = 750)
ggplot(plot.dat, aes(UMAP1, UMAP2)) + geom_point(aes(color = Cluster)) + ggtitle('PBMC Clusters')
dev.off()
## pheatmap
num.mrs <- 25
cell.order <- names(sort(clust.vect))
mr.set <- unique(sapply(vip.mrs, function(x) {names(x$positive[1:num.mrs])}))
num.mrs <- 25
cell.order <- names(sort(clust.vect))
mr.set <- unique(sapply(vip.mrs, function(x) {names(x$positive[1:num.mrs])}))
plot.mat <- vip.mat[mr.set, cell.order]
mat.breaks <- QuantileBreaks(plot.mat)
annot.df <- data.frame('Cluster' = opt.clust[cell.order])
clust.colors <- ClusterColors(length(unique(opt.clust))); names(clust.colors) <- unique(opt.clust)
annot.color <- list('Cluster' = clust.colors)
pheatmap(plot.mat, main = 'Viper Clustering: Master Regulators', fontsize = 20,
annotation_col = annot.df, annotation_colors = annot.color,
cluster_cols = FALSE, show_colnames = FALSE,
cluster_rows = TRUE, show_rownames = TRUE, fontsize_row = 8,
breaks = mat.breaks, color = pact.col(length(mat.breaks) - 1))
library(pheatmap)
num.mrs <- 25
cell.order <- names(sort(clust.vect))
mr.set <- unique(sapply(vip.mrs, function(x) {names(x$positive[1:num.mrs])}))
plot.mat <- pbmc.vip[mr.set, cell.order]
mat.breaks <- QuantileBreaks(plot.mat)
annot.df <- data.frame('Cluster' = opt.clust[cell.order])
clust.colors <- ClusterColors(length(unique(opt.clust))); names(clust.colors) <- unique(opt.clust)
annot.color <- list('Cluster' = clust.colors)
pheatmap(plot.mat, main = 'Viper Clustering: Master Regulators', fontsize = 20,
annotation_col = annot.df, annotation_colors = annot.color,
cluster_cols = FALSE, show_colnames = FALSE,
cluster_rows = TRUE, show_rownames = TRUE, fontsize_row = 8,
breaks = mat.breaks, color = pact.col(length(mat.breaks) - 1))
setwd('C://Users/lvlah/linux/ac_lab/PISCES-dev/')
devtools::document()
data.type <- 'gexp'
if (data.type == 'gexp') {
print('gexp')
} else if (data.type = 'vip') {
print('vip')
} else {
print("Not a valid data type; must be one of 'gexp' or 'vip'")
}
data.type <- 'gexp'
if (data.type == 'gexp') {
print('gexp')
} else if (data.type = 'vip') {
print('vip')
} else {
print("Not a valid data type; must be one of 'gexp' or 'vip'")
}
if (data.type == 'gexp') {
print('gexp')
} else if (data.type == 'vip') {
print('vip')
} else {
print("Not a valid data type; must be one of 'gexp' or 'vip'")
}
data.type <- 'vip'
if (data.type == 'gexp') {
print('gexp')
} else if (data.type == 'vip') {
print('vip')
} else {
print("Not a valid data type; must be one of 'gexp' or 'vip'")
}
data.type <- 'fff'
if (data.type == 'gexp') {
print('gexp')
} else if (data.type == 'vip') {
print('vip')
} else {
print("Not a valid data type; must be one of 'gexp' or 'vip'")
}
?colorRampPalette
ColorLevels <- function(num.colors, data.type) {
if (data.type == 'gexp') {
col.func <- grDevices::colorRampPalette(rev(RColorBrewer::brewer.pal(11, 'PRGn')))
} else if (data.type == 'vip') {
col.func <- grDevices::colorRampPalette(rev(RColorBrewer::brewer.pal(11, 'RdBu')))
} else {
print("Error: Not a valid data type; must be one of 'gexp' or 'vip'")
return(0)
}
return(col.func(num.colors))
}
ColorLevels(length(mat.breaks) - 1, 'vip')
ColorLevels(length(mat.breaks) - 1, 'gexp')
setwd('C://Users/lvlah/linux/ac_lab/PISCES-dev/')
devtools::document()
devtools::install()
setwd('C://Users/lvlah/linux/ac_lab/single-cell-pipeline/')
library(PISCES)
num.mrs <- 25
cell.order <- names(sort(clust.vect))
mr.set <- unique(sapply(vip.mrs, function(x) {names(x$positive[1:num.mrs])}))
plot.mat <- pbmc.vip[mr.set, cell.order]
mat.breaks <- QuantileBreaks(plot.mat)
annot.df <- data.frame('Cluster' = opt.clust[cell.order])
clust.colors <- ClusterColors(length(unique(opt.clust))); names(clust.colors) <- unique(opt.clust)
annot.color <- list('Cluster' = clust.colors)
pheatmap(plot.mat, main = 'Viper Clustering: Master Regulators', fontsize = 20,
annotation_col = annot.df, annotation_colors = annot.color,
cluster_cols = FALSE, show_colnames = FALSE,
cluster_rows = TRUE, show_rownames = TRUE, fontsize_row = 8,
breaks = mat.breaks, color = ColorLevels(length(mat.breaks) - 1, 'vip'))
opt.clust <- sort(vip.clust$clusterings[[which.max(vip.clust$sils)]])
head(opt.clust)
## MR analysis
vip.mrs <- MWUMrs(pbmc.vip, opt.clust)
## visualization
vip.umap <- CustomUMAP(pbmc.vip)
## scatter plot
plot.dat <- data.frame('UMAP1' = vip.umap$layout[,1], 'UMAP2' = vip.umap$layout[,2],
'Cluster' = as.factor(opt.clust))
ggplot(plot.dat, aes(UMAP1, UMAP2)) + geom_point(aes(color = Cluster)) + ggtitle('PBMC Clusters')
## scatter plot
plot.dat <- data.frame('UMAP1' = vip.umap$layout[names(opt.clust),1],
'UMAP2' = vip.umap$layout[names(opt.clust),2],
'Cluster' = as.factor(opt.clust))
ggplot(plot.dat, aes(UMAP1, UMAP2)) + geom_point(aes(color = Cluster)) + ggtitle('PBMC Clusters')
?GeneNameConvert
## transform to gene names for interpretability
plot.mat <- GeneNameConvert(plot.mat, 'human', 'ensg', 'gn')
dim(plot.mat)
plot.mat <- pbmc.vip[mr.set, cell.order]
plot.mat[1:5, 1:5]
head(mr.set)
vip.mrs$`1`$positive[1:5]
head(rownames(vip.mat))
head(rownames(pbmc.vip))
length(pbmc.net.list)
c0.net <- readRDS('general-workflow/pbmc_c0_pruned.rds')
c1.net <- readRDS('general-workflow/pbmc_c1_pruned.rds')
c2.net <- readRDS('general-workflow/pbmc_c2_pruned.rds')
length(c0.net)
pbmc.nets <- list('c0' = c0.net, 'c1' = c1.net, 'c2' = c2.net)
length(pbmc.nets)
## run metaVIPER
pbmc.vip <- viper(sct.mat, pbmc.nets, method = 'none')
head(rownames(pbmc.vip))
dim(pbmc.vip)
save(pbmc.nets, file = 'C://Users/lvlah/linux/ac_lab/PISCES-dev/data/pbmc.nets.rda')
length(pbmc.nets)
rm(pbmc.net.list)
rm(pbmc.nets)
## load networks
data("pbmc.nets", package = "PISCES")
setwd('C://Users/lvlah/linux/ac_lab/PISCES-dev/')
devtools::document()
devtools::install()
setwd('C://Users/lvlah/linux/ac_lab/single-cell-pipeline/')
library(PISCES)
## load networks
data("pbmc.nets", package = "PISCES")
length(pbmc.nets)
pbmc.vip <- viper(sct.mat, pbmc.nets, method = 'none')
pbmc.vip.dist <- as.dist(viperSimilarity(pbmc.vip))
## clustering analysis
vip.clust <- LouvainResRange(pbmc.vip, dist.mat = pbmc.vip.dist, rmax = 310, rstep = 25)
opt.clust <- sort(vip.clust$clusterings[[which.max(vip.clust$sils)]])
## MR analysis
vip.mrs <- MWUMrs(pbmc.vip, opt.clust)
## visualization
vip.umap <- CustomUMAP(pbmc.vip)
## scatter plot
plot.dat <- data.frame('UMAP1' = vip.umap$layout[names(opt.clust),1],
'UMAP2' = vip.umap$layout[names(opt.clust),2],
'Cluster' = as.factor(opt.clust))
jpeg('C://Users/lvlah/linux/ac_lab/PISCES-dev/man/pbmc-vip-scatter.jpg', width = 750, height = 750)
ggplot(plot.dat, aes(UMAP1, UMAP2)) + geom_point(aes(color = Cluster)) + ggtitle('PBMC Clusters')
dev.off()
ggplot(plot.dat, aes(UMAP1, UMAP2)) + geom_point(aes(color = Cluster)) + ggtitle('PBMC Clusters')
## create plot matrix
num.mrs <- 25
cell.order <- names(opt.clust)
mr.set <- unique(sapply(vip.mrs, function(x) {names(x$positive[1:num.mrs])}))
plot.mat <- pbmc.vip[mr.set, cell.order]
## transform to gene names for interpretability
plot.mat <- GeneNameConvert(plot.mat, 'human', 'ensg', 'gn')
dim(plot.mat)
mat.breaks <- QuantileBreaks(plot.mat)
annot.df <- data.frame('Cluster' = opt.clust[cell.order])
clust.colors <- ClusterColors(length(unique(opt.clust))); names(clust.colors) <- unique(opt.clust)
annot.color <- list('Cluster' = clust.colors)
## generate pheatmap
pheatmap(plot.mat, main = 'Viper Clustering: Master Regulators', fontsize = 20,
annotation_col = annot.df, annotation_colors = annot.color,
cluster_cols = FALSE, show_colnames = FALSE,
cluster_rows = TRUE, show_rownames = TRUE, fontsize_row = 8,
breaks = mat.breaks, color = ColorLevels(length(mat.breaks) - 1, 'vip'))
## MR analysis
pbmc.vip.gn <- GeneNameConvert(plot.mat, 'human', 'ensg', 'gn')
vip.mrs <- MWUMrs(pbmc.vip.gn, opt.clust)
## MR analysis
pbmc.vip.gn <- GeneNameConvert(pbmc.vip, 'human', 'ensg', 'gn')
vip.mrs <- MWUMrs(pbmc.vip.gn, opt.clust)
num.mrs <- 25
cell.order <- names(opt.clust)
mr.set <- unique(sapply(vip.mrs, function(x) {names(x$positive[1:num.mrs])}))
plot.mat <- pbmc.vip[mr.set, cell.order]
## set colors and annotations
mat.breaks <- QuantileBreaks(plot.mat)
annot.df <- data.frame('Cluster' = opt.clust[cell.order])
clust.colors <- ClusterColors(length(unique(opt.clust))); names(clust.colors) <- unique(opt.clust)
annot.color <- list('Cluster' = clust.colors)
## generate pheatmap
pheatmap(plot.mat, main = 'Viper Clustering: Master Regulators', fontsize = 20,
annotation_col = annot.df, annotation_colors = annot.color,
cluster_cols = FALSE, show_colnames = FALSE,
cluster_rows = TRUE, show_rownames = TRUE, fontsize_row = 8,
breaks = mat.breaks, color = ColorLevels(length(mat.breaks) - 1, 'vip'))
## generate pheatmap
pheatmap(plot.mat, main = 'Viper Clustering: Master Regulators', fontsize = 20,
annotation_col = annot.df, annotation_colors = annot.color,
cluster_cols = FALSE, show_colnames = FALSE,
cluster_rows = FALSE, show_rownames = TRUE, fontsize_row = 8,
breaks = mat.breaks, color = ColorLevels(length(mat.breaks) - 1, 'vip'))
head(vip.mrs$`1`$positive)
head(mr.set)
dim(mr.set)
head(unlist(mr.set))
head(as.list(mr.set))
mr.set <- sapply(vip.mrs, function(x) {names(x$positive[1:num.mrs])})
head(mr.set)
mr.set <- unique(unlist(as.list(mr.set)))
plot.mat <- pbmc.vip[mr.set, cell.order]
## set colors and annotations
mat.breaks <- QuantileBreaks(plot.mat)
annot.df <- data.frame('Cluster' = opt.clust[cell.order])
clust.colors <- ClusterColors(length(unique(opt.clust))); names(clust.colors) <- unique(opt.clust)
annot.color <- list('Cluster' = clust.colors)
## generate pheatmap
pheatmap(plot.mat, main = 'Viper Clustering: Master Regulators', fontsize = 20,
annotation_col = annot.df, annotation_colors = annot.color,
cluster_cols = FALSE, show_colnames = FALSE,
cluster_rows = FALSE, show_rownames = TRUE, fontsize_row = 8,
breaks = mat.breaks, color = ColorLevels(length(mat.breaks) - 1, 'vip'))
jpeg('C://Users/lvlah/linux/ac_lab/PISCES-dev/man/pbmc-vip-pheatmap.jpg', width = 750, height = 1000)
pheatmap(plot.mat, main = 'Viper Clustering: Master Regulators', fontsize = 20,
annotation_col = annot.df, annotation_colors = annot.color,
cluster_cols = FALSE, show_colnames = FALSE,
cluster_rows = FALSE, show_rownames = TRUE, fontsize_row = 8,
breaks = mat.breaks, color = ColorLevels(length(mat.breaks) - 1, 'vip'))
dev.off()
dev.off()
jpeg('C://Users/lvlah/linux/ac_lab/PISCES-dev/man/pbmc-vip-pheatmap.jpg', width = 750, height = 1000)
pheatmap(plot.mat, main = 'Viper Clustering: Master Regulators', fontsize = 20,
annotation_col = annot.df, annotation_colors = annot.color,
cluster_cols = FALSE, show_colnames = FALSE,
cluster_rows = FALSE, show_rownames = TRUE, fontsize_row = 8,
breaks = mat.breaks, color = ColorLevels(length(mat.breaks) - 1, 'vip'))
dev.off()
plot.mat <- pbmc.vip.gn[mr.set, cell.order]
## set colors and annotations
mat.breaks <- QuantileBreaks(plot.mat)
annot.df <- data.frame('Cluster' = opt.clust[cell.order])
clust.colors <- ClusterColors(length(unique(opt.clust))); names(clust.colors) <- unique(opt.clust)
annot.color <- list('Cluster' = clust.colors)
## generate pheatmap
jpeg('C://Users/lvlah/linux/ac_lab/PISCES-dev/man/pbmc-vip-pheatmap.jpg', width = 750, height = 1000)
pheatmap(plot.mat, main = 'Viper Clustering: Master Regulators', fontsize = 20,
annotation_col = annot.df, annotation_colors = annot.color,
cluster_cols = FALSE, show_colnames = FALSE,
cluster_rows = FALSE, show_rownames = TRUE, fontsize_row = 8,
breaks = mat.breaks, color = ColorLevels(length(mat.breaks) - 1, 'vip'))
dev.off()
setwd('C://Users/lvlah/linux/ac_lab/PISCES-dev/')
devtools::document()
devtools::install()
