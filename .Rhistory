dist.mat[1:5, 1:5]
sqrt(2)
cor.mat <- cor(t(test.dat.2), method = 'spearman'))
cor.mat <- cor(t(test.dat.2), method = 'spearman')
cor.mat[1:5, 1:5]
head(test.dat.2)
cor.mat <- cor(t(test.dat.2), method = 'pearson')
head(test.dat.2)
## build distance matrix
BuildDistanceMat <- function(dat.mat) {
dist.mat <- sqrt(1 - cor(t(dat.mat), method = 'pearson'))
rownames(dist.mat) <- rownames(dat.mat)
return(dist.mat)
}
## get distance matrix
dist.mat <- BuildDistanceMat(dat.mat)
## get density vector; plot
dense.vec <- BuildDensityVec(dat.mat, dist.mat)
plot.dat <- data.frame('x' = plot.mat[,1], 'y' = plot.mat[,2],
'Density' = dense.vec)
ggplot(plot.dat, aes(x, y)) + geom_density2d(color = 'forestgreen') +
geom_point(aes(color = Density)) +
scale_color_gradient2(low = 'blue', mid = 'white', high = 'red')
dist.mat[1:5, 1:5]
## build distance matrix
BuildDistanceMat <- function(dat.mat) {
dist.mat <- sqrt(1 - cor(t(dat.mat), method = 'pearson')**2)
rownames(dist.mat) <- rownames(dat.mat)
return(dist.mat)
}
## get distance matrix
dist.mat <- BuildDistanceMat(dat.mat)
dist.mat[1:5, 1:5]
cor.mat[1:5, 1:5]
cor.mat <- cor(t(dat.mat), method = 'pearson')
cor.mat[1:5, 1:5]
dat.mat[,1]
dat.mat[1,]
dat.mat[2,]
cor(dat.mat[1,], dat.mat[2,])
cor(dat.mat[1,], dat.mat[2,], method = 'pearson')
cor(dat.mat[1,], dat.mat[2,], method = 'spearman')
# make pca + plot
td2.pca <- prcomp(test.dat.2)
plot.dat <- data.frame('PC1' = td2.pca$x[,1], 'PC2' = td2.pca$x[,2])
ggplot(plot.dat, aes(x, y)) + geom_point() +
geom_density2d(color = 'forestgreen')
ggplot(plot.dat, aes(PC1, PC2)) + geom_point() +
geom_density2d(color = 'forestgreen')
### high-dimensional density
###############
dat.mat <- test.dat.2
plot.mat <- td2.pca
## get distance matrix
dist.mat <- BuildDistanceMat(dat.mat)
## get density vector; plot
dense.vec <- BuildDensityVec(dat.mat, dist.mat)
plot.dat <- data.frame('x' = plot.mat[,1], 'y' = plot.mat[,2],
'Density' = dense.vec)
plot.mat <- td2.pca$x
## get density vector; plot
dense.vec <- BuildDensityVec(dat.mat, dist.mat)
plot.dat <- data.frame('x' = plot.mat[,1], 'y' = plot.mat[,2],
'Density' = dense.vec)
ggplot(plot.dat, aes(x, y)) + geom_density2d(color = 'forestgreen') +
geom_point(aes(color = Density)) +
scale_color_gradient2(low = 'blue', mid = 'white', high = 'red')
head(test.dat.2)
## test set 2
set.seed(343)
num.dims <- 10
mean.1 <- rep(0, num.dims)
test.dat.2 <- HighDimSimul(num.dims, 1000, mean.1)
rownames(test.dat.2) <- paste('sample', 1:nrow(test.dat.2), sep = '.')
# make pca + plot
td2.pca <- prcomp(test.dat.2)
plot.dat <- data.frame('PC1' = td2.pca$x[,1], 'PC2' = td2.pca$x[,2])
ggplot(plot.dat, aes(PC1, PC2)) + geom_point() +
geom_density2d(color = 'forestgreen')
dim(test.dat.2)
### high-dimensional density
###############
dat.mat <- test.dat.2
plot.mat <- td2.pca$x
## get distance matrix
dist.mat <- BuildDistanceMat(dat.mat)
## get density vector; plot
dense.vec <- BuildDensityVec(dat.mat, dist.mat)
plot.dat <- data.frame('x' = plot.mat[,1], 'y' = plot.mat[,2],
'Density' = dense.vec)
ggplot(plot.dat, aes(x, y)) + geom_density2d(color = 'forestgreen') +
geom_point(aes(color = Density)) +
scale_color_gradient2(low = 'blue', mid = 'white', high = 'red')
plot.dat <- data.frame('x' = plot.mat[,1], 'y' = plot.mat[,2],
'Density' = dense.vec)
ggplot(plot.dat, aes(x, y)) + geom_density2d(color = 'forestgreen') +
geom_point(aes(color = Density)) +
scale_color_gradient2(low = 'blue', mid = 'white', high = 'red', midpoint = mean(dense.vec))
dist.mat[1:5, 1:5]
## density vector
BuildDensityVec <- function(dat.mat, dist.mat, bw) {
# get data size
num.feats <- ncol(dat.mat)
num.samps <- nrow(dat.mat)
# estimate bandwidth if necessary
if (missing(bw)) {
feature.sd <- mean(apply(dat.mat, 2, sd))
bw <- (4 / (num.feats + 2)) ^ (1 / (num.feats + 4))
bw <- bw * num.samps^((-1) / (num.feats + 4)) * feature.sd
}
print(bw)
# estimate density
norm.val <- num.samps * bw
dense.vec <- apply(dist.mat, 1, function(x) {
(1 / norm.val) * sum(EpKernel(x / bw))
})
names(dense.vec) <- rownames(dat.mat)
# return
return(dense.vec)
}
## get density vector; plot
dense.vec <- BuildDensityVec(dat.mat, dist.mat)
### functions for high-dim peak picking
###############
## kernel function
EpKernel <- function(u) {
ep.val <- (3/8) * (1 - u**2)
return(ep.val)
}
## get density vector; plot
dense.vec <- BuildDensityVec(dat.mat, dist.mat)
plot.dat <- data.frame('x' = plot.mat[,1], 'y' = plot.mat[,2],
'Density' = dense.vec)
ggplot(plot.dat, aes(x, y)) + geom_density2d(color = 'forestgreen') +
geom_point(aes(color = Density)) +
scale_color_gradient2(low = 'blue', mid = 'white', high = 'red', midpoint = mean(dense.vec))
### functions for high-dim peak picking
###############
## kernel function
EpKernel <- function(u) {
ep.val <- (3/8) * (2 - u**2)
return(ep.val)
}
## get density vector; plot
dense.vec <- BuildDensityVec(dat.mat, dist.mat)
plot.dat <- data.frame('x' = plot.mat[,1], 'y' = plot.mat[,2],
'Density' = dense.vec)
ggplot(plot.dat, aes(x, y)) + geom_density2d(color = 'forestgreen') +
geom_point(aes(color = Density)) +
scale_color_gradient2(low = 'blue', mid = 'white', high = 'red', midpoint = mean(dense.vec))
head(plot.mat)
dist.mat[1:5, 1:5]
## test set 2
set.seed(343)
num.dims <- 2
mean.1 <- rep(0, num.dims)
test.dat.2 <- HighDimSimul(num.dims, 1000, mean.1)
rownames(test.dat.2) <- paste('sample', 1:nrow(test.dat.2), sep = '.')
# make pca + plot
td2.pca <- prcomp(test.dat.2)
plot.dat <- data.frame('PC1' = td2.pca$x[,1], 'PC2' = td2.pca$x[,2])
ggplot(plot.dat, aes(PC1, PC2)) + geom_point() +
geom_density2d(color = 'forestgreen')
### high-dimensional density
###############
dat.mat <- test.dat.2
plot.mat <- td2.pca$x
## get distance matrix
dist.mat <- BuildDistanceMat(dat.mat)
## get density vector; plot
dense.vec <- BuildDensityVec(dat.mat, dist.mat)
plot.dat <- data.frame('x' = plot.mat[,1], 'y' = plot.mat[,2],
'Density' = dense.vec)
ggplot(plot.dat, aes(x, y)) + geom_density2d(color = 'forestgreen') +
geom_point(aes(color = Density)) +
scale_color_gradient2(low = 'blue', mid = 'white', high = 'red', midpoint = mean(dense.vec))
num.dims <- 10
mean.1 <- rep(0, num.dims)
test.dat.2 <- HighDimSimul(num.dims, 1000, mean.1)
rownames(test.dat.2) <- paste('sample', 1:nrow(test.dat.2), sep = '.')
# make pca + plot
td2.pca <- prcomp(test.dat.2)
plot.dat <- data.frame('PC1' = td2.pca$x[,1], 'PC2' = td2.pca$x[,2])
ggplot(plot.dat, aes(PC1, PC2)) + geom_point() +
geom_density2d(color = 'forestgreen')
### functions for high-dim peak picking
###############
## kernel function
EpKernel <- function(u) {
ep.val <- (3/8) * (2 - u**2)
return(ep.val)
}
## get density vector; plot
dense.vec <- BuildDensityVec(dat.mat, dist.mat)
plot.dat <- data.frame('x' = plot.mat[,1], 'y' = plot.mat[,2],
'Density' = dense.vec)
ggplot(plot.dat, aes(x, y)) + geom_density2d(color = 'forestgreen') +
geom_point(aes(color = Density)) +
scale_color_gradient2(low = 'blue', mid = 'white', high = 'red', midpoint = mean(dense.vec))
dat.mat <- test.dat.2
plot.mat <- td2.pca$x
## get distance matrix
dist.mat <- BuildDistanceMat(dat.mat)
## get density vector; plot
dense.vec <- BuildDensityVec(dat.mat, dist.mat)
plot.dat <- data.frame('x' = plot.mat[,1], 'y' = plot.mat[,2],
'Density' = dense.vec)
ggplot(plot.dat, aes(x, y)) + geom_density2d(color = 'forestgreen') +
geom_point(aes(color = Density)) +
scale_color_gradient2(low = 'blue', mid = 'white', high = 'red', midpoint = mean(dense.vec))
## localized climbing
EpKernel(sqrt(2))
EpKernel(0)
dist.mat[1,]
dim(dist.mat)
head(EpKernel(dist.mat[1,] / 0.6))
## density vector
BuildDensityVec <- function(dat.mat, dist.mat, bw) {
# get data size
num.feats <- ncol(dat.mat)
num.samps <- nrow(dat.mat)
# estimate bandwidth if necessary
if (missing(bw)) {
feature.sd <- mean(apply(dat.mat, 2, sd))
bw <- (4 / (num.feats + 2)) ^ (1 / (num.feats + 4))
bw <- bw * num.samps^((-1) / (num.feats + 4)) * feature.sd
}
bw <- min(1, bw)
# estimate density
norm.val <- num.samps * bw
dense.vec <- c()
for (i in 1:nrow(dist.mat)) {
dense.vec <- (1 / norm.val) * sum(EpKernel(dist.mat))
}
names(dense.vec) <- rownames(dat.mat)
# return
return(dense.vec)
}
## get density vector; plot
dense.vec <- BuildDensityVec(dat.mat, dist.mat)
plot.dat <- data.frame('x' = plot.mat[,1], 'y' = plot.mat[,2],
'Density' = dense.vec)
ggplot(plot.dat, aes(x, y)) + geom_density2d(color = 'forestgreen') +
geom_point(aes(color = Density)) +
scale_color_gradient2(low = 'blue', mid = 'white', high = 'red', midpoint = mean(dense.vec))
## get density vector; plot
dense.vec <- BuildDensityVec(dat.mat, dist.mat)
plot.dat <- data.frame('x' = plot.mat[,1], 'y' = plot.mat[,2],
'Density' = dense.vec)
## density vector
BuildDensityVec <- function(dat.mat, dist.mat, bw) {
# get data size
num.feats <- ncol(dat.mat)
num.samps <- nrow(dat.mat)
# estimate bandwidth if necessary
if (missing(bw)) {
feature.sd <- mean(apply(dat.mat, 2, sd))
bw <- (4 / (num.feats + 2)) ^ (1 / (num.feats + 4))
bw <- bw * num.samps^((-1) / (num.feats + 4)) * feature.sd
}
bw <- min(1, bw)
# estimate density
norm.val <- num.samps * bw
dense.vec <- apply(dist.mat, 1, function(x) {
(1 / norm.val) * sum(EpKernel(x / bw))
})
names(dense.vec) <- rownames(dat.mat)
# return
return(dense.vec)
}
## get density vector; plot
dense.vec <- BuildDensityVec(dat.mat, dist.mat)
plot.dat <- data.frame('x' = plot.mat[,1], 'y' = plot.mat[,2],
'Density' = dense.vec)
ggplot(plot.dat, aes(x, y)) + geom_density2d(color = 'forestgreen') +
geom_point(aes(color = Density)) +
scale_color_gradient2(low = 'blue', mid = 'white', high = 'red', midpoint = mean(dense.vec))
dist.mat <- as.matrix(dist(plot.mat[,1:2]))
dim(dist.mat)
## get density vector; plot
dense.vec <- BuildDensityVec(dat.mat, dist.mat)
plot.dat <- data.frame('x' = plot.mat[,1], 'y' = plot.mat[,2],
'Density' = dense.vec)
ggplot(plot.dat, aes(x, y)) + geom_density2d(color = 'forestgreen') +
geom_point(aes(color = Density)) +
scale_color_gradient2(low = 'blue', mid = 'white', high = 'red', midpoint = mean(dense.vec))
euclid.dist <- dist(dat.mat)
dim(dist.mat)
dim(euclid.dist)
euclid.dist <- as.matrix(dist(dat.mat))
dim(euclid.dist)
## get distance matrix
dist.mat <- BuildDistanceMat(dat.mat)
cor(euclid.dist, dist.mat)
## build distance matrix
BuildDistanceMat <- function(dat.mat) {
dist.mat <- sqrt(1 - cor(t(dat.mat), method = 'pearson'))
rownames(dist.mat) <- rownames(dat.mat)
return(dist.mat)
}
## density vector
BuildDensityVec <- function(dat.mat, dist.mat, bw) {
# get data size
num.feats <- ncol(dat.mat)
num.samps <- nrow(dat.mat)
# estimate bandwidth if necessary
if (missing(bw)) {
feature.sd <- mean(apply(dat.mat, 2, sd))
bw <- (4 / (num.feats + 2)) ^ (1 / (num.feats + 4))
bw <- bw * num.samps^((-1) / (num.feats + 4)) * feature.sd
}
bw <- min(1, bw)
# estimate density
norm.val <- num.samps * bw
dense.vec <- apply(dist.mat, 1, function(x) {
(1 / norm.val) * sum(EpKernel(x / bw))
})
names(dense.vec) <- rownames(dat.mat)
# return
return(dense.vec)
}
### high-dimensional density
###############
dat.mat <- test.dat.2
plot.mat <- td2.pca$x
## get distance matrix
dist.mat <- BuildDistanceMat(dat.mat)
## get density vector; plot
dense.vec <- BuildDensityVec(dat.mat, dist.mat)
plot.dat <- data.frame('x' = plot.mat[,1], 'y' = plot.mat[,2],
'Density' = dense.vec)
ggplot(plot.dat, aes(x, y)) + geom_density2d(color = 'forestgreen') +
geom_point(aes(color = Density)) +
scale_color_gradient2(low = 'blue', mid = 'white', high = 'red', midpoint = mean(dense.vec))
cor(rowMeans(dist.mat), dense.vec)
cor(rowSums(dist.mat), dense.vec)
a <- matrix(c(0,1,2, 3, 4, 5, 6, 7, 8, 9, 10, 11), nrow = 4)
a
cor(a)
a <- matrix(rnorm(12), nrow = 4)
cor(a)
sqrt(1 - cor(a))
sqrt(1 - 0.422)
sqrt(1 - 0.423)
sqrt(1 - 0.742)
dim(dist.mat)
dim(dat.mat)
random.mat <- matrix(rnorm(10 * 1000), ncol = 10)
euclid.dist <- as.matrix(dist(random.mat))
cor.dist <- sqrt(1 - cor(t(random.mat)))
dim(euclid.dist)
dim(cor.dist)
upper.tri(euclid.dist)
cor(euclid.dist[upper.tri(euclid.dist)], cor.dist[upper.tri(cor.dist)])
## density vector
BuildDensityVec <- function(dat.mat, dist.mat, bw) {
# get data size
num.feats <- ncol(dat.mat)
num.samps <- nrow(dat.mat)
# estimate bandwidth if necessary
if (missing(bw)) {
feature.sd <- mean(apply(dat.mat, 2, sd))
bw <- (4 / (num.feats + 2)) ^ (1 / (num.feats + 4))
bw <- bw * num.samps^((-1) / (num.feats + 4)) * feature.sd
}
bw <- min(1, bw)
# estimate density
norm.val <- num.samps * bw
dense.mat <- matrix(0L, nrow = nrow(dist.mat), ncol = ncol(dist.mat))
dense.mat[upper.tri(dense.mat)] <- EpKernel(dist.mat[upper.tri(dist.mat)] / bw)
dense.mat[lower.tri(dense.mat)] <- EpKernel(dist.mat[lower.tri(dist.mat)] / bw)
dense.mat <- dense.mat * (1 / norm.val)
dense.vec <- rowSums(dense.mat)
names(dense.vec) <- rownames(dist.mat)
# return
return(dense.vec)
}
### high-dimensional density
###############
dat.mat <- test.dat.2
plot.mat <- td2.pca$x
## get distance matrix
dist.mat <- BuildDistanceMat(dat.mat)
## get density vector; plot
dense.vec <- BuildDensityVec(dat.mat, dist.mat)
plot.dat <- data.frame('x' = plot.mat[,1], 'y' = plot.mat[,2],
'Density' = dense.vec)
ggplot(plot.dat, aes(x, y)) + geom_density2d(color = 'forestgreen') +
geom_point(aes(color = Density)) +
scale_color_gradient2(low = 'blue', mid = 'white', high = 'red', midpoint = mean(dense.vec))
### functions for high-dim peak picking
###############
## kernel function
EpKernel <- function(u) {
ep.val <- (3/2) * (-u) * (u - sqrt(2))
return(ep.val)
}
## get distance matrix
dist.mat <- BuildDistanceMat(dat.mat)
## get density vector; plot
dense.vec <- BuildDensityVec(dat.mat, dist.mat)
plot.dat <- data.frame('x' = plot.mat[,1], 'y' = plot.mat[,2],
'Density' = dense.vec)
ggplot(plot.dat, aes(x, y)) + geom_density2d(color = 'forestgreen') +
geom_point(aes(color = Density)) +
scale_color_gradient2(low = 'blue', mid = 'white', high = 'red', midpoint = mean(dense.vec))
### high-dimensional density
###############
dat.mat <- test.dat.1
plot.mat <- td1.pca$x
## get distance matrix
dist.mat <- BuildDistanceMat(dat.mat)
## get density vector; plot
dense.vec <- BuildDensityVec(dat.mat, dist.mat)
plot.dat <- data.frame('x' = plot.mat[,1], 'y' = plot.mat[,2],
'Density' = dense.vec)
ggplot(plot.dat, aes(x, y)) + geom_density2d(color = 'forestgreen') +
geom_point(aes(color = Density)) +
scale_color_gradient2(low = 'blue', mid = 'white', high = 'red', midpoint = mean(dense.vec))
head(dense.vec)
## density vector
BuildDensityVec <- function(dat.mat, dist.mat, bw) {
# get data size
num.feats <- ncol(dat.mat)
num.samps <- nrow(dat.mat)
# estimate bandwidth if necessary
if (missing(bw)) {
feature.sd <- mean(apply(dat.mat, 2, sd))
bw <- (4 / (num.feats + 2)) ^ (1 / (num.feats + 4))
bw <- bw * num.samps^((-1) / (num.feats + 4)) * feature.sd
}
bw <- min(1, bw)
bw <- 1
# estimate density
norm.val <- num.samps * bw
dense.mat <- matrix(0L, nrow = nrow(dist.mat), ncol = ncol(dist.mat))
dense.mat[upper.tri(dense.mat)] <- EpKernel(dist.mat[upper.tri(dist.mat)] / bw)
dense.mat[lower.tri(dense.mat)] <- EpKernel(dist.mat[lower.tri(dist.mat)] / bw)
dense.mat <- dense.mat * (1 / norm.val)
dense.vec <- rowSums(dense.mat)
names(dense.vec) <- rownames(dist.mat)
# return
return(dense.vec)
}
## get density vector; plot
dense.vec <- BuildDensityVec(dat.mat, dist.mat)
plot.dat <- data.frame('x' = plot.mat[,1], 'y' = plot.mat[,2],
'Density' = dense.vec)
ggplot(plot.dat, aes(x, y)) + geom_density2d(color = 'forestgreen') +
geom_point(aes(color = Density)) +
scale_color_gradient2(low = 'blue', mid = 'white', high = 'red', midpoint = mean(dense.vec))
## get density vector; plot
dense.vec <- BuildDensityVec(dat.mat, dist.mat, bw = 0.05)
plot.dat <- data.frame('x' = plot.mat[,1], 'y' = plot.mat[,2],
'Density' = dense.vec)
ggplot(plot.dat, aes(x, y)) + geom_density2d(color = 'forestgreen') +
geom_point(aes(color = Density)) +
scale_color_gradient2(low = 'blue', mid = 'white', high = 'red', midpoint = mean(dense.vec))
## density vector
BuildDensityVec <- function(dat.mat, dist.mat, bw) {
# get data size
num.feats <- ncol(dat.mat)
num.samps <- nrow(dat.mat)
# estimate bandwidth if necessary
if (missing(bw)) {
feature.sd <- mean(apply(dat.mat, 2, sd))
bw <- (4 / (num.feats + 2)) ^ (1 / (num.feats + 4))
bw <- bw * num.samps^((-1) / (num.feats + 4)) * feature.sd
}
#bw <- min(1, bw)
# estimate density
norm.val <- num.samps * bw
dense.mat <- matrix(0L, nrow = nrow(dist.mat), ncol = ncol(dist.mat))
dense.mat[upper.tri(dense.mat)] <- EpKernel(dist.mat[upper.tri(dist.mat)] / bw)
dense.mat[lower.tri(dense.mat)] <- EpKernel(dist.mat[lower.tri(dist.mat)] / bw)
dense.mat <- dense.mat * (1 / norm.val)
dense.vec <- rowSums(dense.mat)
names(dense.vec) <- rownames(dist.mat)
# return
return(dense.vec)
}
## get density vector; plot
dense.vec <- BuildDensityVec(dat.mat, dist.mat, bw = 0.05)
plot.dat <- data.frame('x' = plot.mat[,1], 'y' = plot.mat[,2],
'Density' = dense.vec)
ggplot(plot.dat, aes(x, y)) + geom_density2d(color = 'forestgreen') +
geom_point(aes(color = Density)) +
scale_color_gradient2(low = 'blue', mid = 'white', high = 'red', midpoint = mean(dense.vec))
setwd('C://Users/lvlah/linux/ac_lab/PISCES-dev/')
usethis::use_vignette("general-workflow")
abt.mat <- seur.obj@assays$ADT@scale.data
rna.mat <- as.matrix(seur.obj@assays$RNA@counts)
bootcamp.dir <- 'C://Users/lvlah/linux/ac_lab/sc-bootcamp_21/'
## load data
seur.obj <- readRDS(paste(bootcamp.dir, 'cbmc_gene_seurat.rds', sep = ''))
abt.mat <- seur.obj@assays$ADT@scale.data
rna.mat <- as.matrix(seur.obj@assays$RNA@counts)
devtools::use_data(rna.mat)
usethis::use_data(rna.mat)
cbmc_rna-mat <- rna.mat
?use_data
cbmc_rna <- rna.mat
cbmc_abt <- abt.mat
usethis::use_data(cbmc_rna)
usethis::use_data(cbmc_abt)
cbmc_networks <- readRDS('C://Users/lvlah/linux/ac_lab/sc-bootcamp_21/cbmc_nets.rds)
cbmc_networks <- readRDS('C://Users/lvlah/linux/ac_lab/sc-bootcamp_21/cbmc_nets.rds')
usethis::use_data(cbmc_networks)
setwd('C://Users/lvlah/linux/ac_lab/PISCES-dev/')
devtools::document(); devtools::load_all()
library(PISCES)
devtools::install_github("califano-lab/PISCES")
