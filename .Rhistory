saveRDS(r1.mwk2, file = 'C://Users/lvlah/linux/ac_lab/data/cardoso_lung/car-lung_r1-mwkm2.rds')
saveRDS(pAct.phiCorr, file = 'C://Users/lvlah/linux/ac_lab/data/cardoso_lung/car-lung_r1-phiCorr.rds')
pAct.phiCorr <- pAct.phiCorr[ names(sort(abs(pAct.phiCorr), decreasing = TRUE)) ]
annot.df <- data.frame('phi' = sort(phiVals[1,]))
row.df <- data.frame('corr' = abs(pAct.phiCorr[1:50]))
pheatmap(r1.pAct[ names(pAct.phiCorr)[1:50] , names(sort(phiVals[1,])) ], scale = 'row',
annotation_col = annot.df, annotation_row = row.df,
color = colorRampPalette(rev(brewer.pal(10, 'RdBu')))(100), fontsize_row = 6,
cluster_rows = FALSE, cluster_cols = FALSE, show_colnames = FALSE, show_rownames = TRUE,
main = 'Multiway K-Means Analysis')
### LASSO regression against phi values ###
library(glmnet)
x <- t(r1.pAct)
y <- as.double(as.matrix(phiVals[1,]))
cv.lasso <- cv.glmnet(x, y, type.measure = 'auc', standardize = TRUE)
plot(cv.lasso)
plot(cv.lasso$glmnet.fit, xvar="lambda", label=TRUE)
cv.lasso$lambda.min
cv.lasso$lambda.1se
coef(cv.lasso, s=cv.lasso$lambda.min)
fit.coefs <- coef(cv.lasso, s=cv.lasso$lambda.min)
fit.coefs <- as.matrix(fit.coefs)[, 1]
fit.coefs <- fit.coefs[-1]
fit.coefs <- fit.coefs[ names(sort(abs(fit.coefs), decreasing = TRUE)) ]
numMR <- 50
annot.df <- data.frame('phi' = sort(phiVals[1,]))
row.df <- data.frame('coeff' = abs(fit.coefs[1:numMR]))
pheatmap(r1.pAct[ names(fit.coefs)[1:numMR] , names(sort(phiVals[1,])) ], scale = 'row',
annotation_col = annot.df, annotation_row = row.df,
color = colorRampPalette(rev(brewer.pal(10, 'RdBu')))(100), fontsize_row = 6,
cluster_rows = FALSE, cluster_cols = FALSE, show_colnames = FALSE, show_rownames = TRUE,
main = 'Multiway K-Means Analysis')
cpm.mat <- readRDS('C://Users/lvlah/linux/ac_lab/data/cardoso_lung//car-lung_cpm.rds')
cpm.mat <- readRDS('C://Users/lvlah/linux/ac_lab/data/cardoso_lung/car-lung_cpm.rds')
rank.mat <- readRDS('C://Users/lvlah/linux/ac_lab/data/cardoso_lung/car-lung_rank.rds')
rownames(rank.mat)
## SECOND VIPER RUN AND CLUSTERING ###
c1.net <- readRDS('C://Users/lvlah/linux/ac_lab/data/filtered_feature_bc_matrix/car-lung_c1-r2-net_pruned.rds')
c2.net <- readRDS('C://Users/lvlah/linux/ac_lab/data/filtered_feature_bc_matrix/car-lung_c2-r2-net_pruned.rds')
## SECOND VIPER RUN AND CLUSTERING ###
c1.net <- readRDS('C://Users/lvlah/linux/ac_lab/data/cardoso_lung/car-lung_c1-r2-net_pruned.rds')
c2.net <- readRDS('C://Users/lvlah/linux/ac_lab/data/cardoso_lung/car-lung_c2-r2-net_pruned.rds')
## regulon visualization
nets <- c(c1.net, c2.net)
vip.mat <- r2.pAct
r1.net <- readRDS('C://Users/lvlah/linux/ac_lab/data/cardoso_lung/car-lung_pruned.rds')
## regulon visualization
net <- r1.net
r1.pAct <- readRDS('C://Users/lvlah/linux/ac_lab/data/cardoso_lung/car-lung_r1-pAct.rds')
vip.mat <- r1.pAct
gene.sig <- rank.mat
rownames(r1.pAct)[1]
dim(r1.pAct)
rownames(r1.pAct)
net$`Aatf''
''
'
net$'Aatf'
regulon <- net$get(feature)
protein <- 'Aatf'
regulon <- net$protein
regulon
regulon <- net$get(protein)
regulon <- net[[protein]]
regulon
edges <- names(regulon$tfmode)
edges
annot.df <- data.frame('phi' = sort(phiVals[1,]))
row.df <- data.frame('tf.mode' = regulon$tfmode, 'likelihood' = regulon$likelihood)
pheat.mat <- gene.sig[intersect(rownames(gene.sig), edges), names(sort(phiVals[1,]))]
row.df <- data.frame('tf.mode' = regulon$tfmode[order(regulon$tfmode)], 'likelihood' = regulon$likelihood[order(regulon$tfmode)])
edges <- sort(edges)
pheat.mat <- gene.sig[intersect(rownames(gene.sig), edges), names(sort(phiVals[1,]))]
pheatmap(pheat.mat, scale = 'row', annotation_col = annot.df, annotation_row = row.df,
color = colorRampPalette(rev(brewer.pal(10, 'RdBu')))(100),
cluster_rows = FALSE, cluster_cols = FALSE, show_colnames = FALSE, show_rownames = TRUE,
main = paste('Regulon Viz: ', protein, sep = ''))
pheatmap(pheat.mat, scale = 'row', annotation_col = annot.df, annotation_row = row.df,
color = colorRampPalette(rev(brewer.pal(10, 'RdBu')))(100),
cluster_rows = FALSE, cluster_cols = FALSE, show_colnames = FALSE, show_rownames = TRUE,
main = paste('Regulon Viz: ', protein, sep = ''))
regulon <- net[[protein]]
tfm <- regulon$tfmode
like <- regulon$likelihood[order(tfm)]
tfm <- sort(tfm)
edges <- names(tfm)
regulon <- net[[protein]]
tfm <- regulon$tfmode
like <- regulon$likelihood[order(tfm)]
tfm <- sort(tfm)
edges <- names(tfm)
row.df <- data.frame('tf.mode' = tfm, 'likelihood' = like)
pheat.mat <- gene.sig[intersect(rownames(gene.sig), edges), names(sort(phiVals[1,]))]
pheatmap(pheat.mat, scale = 'row', annotation_col = annot.df, annotation_row = row.df,
color = colorRampPalette(rev(brewer.pal(10, 'RdBu')))(100),
cluster_rows = FALSE, cluster_cols = FALSE, show_colnames = FALSE, show_rownames = TRUE,
main = paste('Regulon Viz: ', protein, sep = ''))
tfm
pheatmap(pheat.mat, scale = 'row', annotation_col = annot.df, annotation_row = row.df,
color = colorRampPalette(rev(brewer.pal(10, 'RdBu')))(100),
cluster_rows = FALSE, cluster_cols = FALSE, show_colnames = FALSE, show_rownames = TRUE,
main = paste('Regulon Viz: ', protein, sep = ''))
row.df
pheat.mat <- gene.sig[intersect(edges, rownames(gene.sig)), names(sort(phiVals[1,]))]
pheatmap(pheat.mat, scale = 'row', annotation_col = annot.df, annotation_row = row.df,
color = colorRampPalette(rev(brewer.pal(10, 'RdBu')))(100),
cluster_rows = FALSE, cluster_cols = FALSE, show_colnames = FALSE, show_rownames = TRUE,
main = paste('Regulon Viz: ', protein, sep = ''))
pheatmap(pheat.mat, scale = 'row', annotation_col = annot.df, annotation_row = row.df,
color = colorRampPalette(rev(brewer.pal(10, 'RdBu')))(100),
cluster_rows = FALSE, cluster_cols = FALSE, show_colnames = FALSE, show_rownames = TRUE,
main = paste('Regulon Viz: ', protein, sep = ''))
pheatmap(r1.pAct[markers,names(sort(phiVals[1,]))], scale = 'row', annotation_col = annot.df,
color = colorRampPalette(rev(brewer.pal(10, 'RdBu')))(100),
cluster_rows = TRUE, cluster_cols = FALSE, show_colnames = FALSE, show_rownames = TRUE,
main = 'Multiway K-Means Analysis')
pheatmap(cpm.mat[markers,names(sort(phiVals[1,]))], scale = 'row', annotation_col = annot.df,
color = colorRampPalette(rev(brewer.pal(10, 'RdBu')))(100),
cluster_rows = TRUE, cluster_cols = FALSE, show_colnames = FALSE, show_rownames = TRUE,
main = 'Multiway K-Means Analysis')
pheatmap(r1.pAct[markers,names(sort(phiVals[1,]))], scale = 'row', annotation_col = annot.df,
color = colorRampPalette(rev(brewer.pal(10, 'RdBu')))(100),
cluster_rows = TRUE, cluster_cols = FALSE, show_colnames = FALSE, show_rownames = TRUE,
main = 'Multiway K-Means Analysis')
annot.df <- data.frame('clust' = as.factor(r1.clust$k2$clustering[names(sort(phiVals[1,]))]),
'phi' = sort(phiVals[1,]))
pheatmap(cpm.mat[markers,names(sort(phiVals[1,]))], scale = 'row', annotation_col = annot.df,
color = colorRampPalette(rev(brewer.pal(10, 'RdBu')))(100),
cluster_rows = TRUE, cluster_cols = FALSE, show_colnames = FALSE, show_rownames = TRUE,
main = 'Multiway K-Means Analysis')
pheatmap(r1.pAct[markers,names(sort(phiVals[1,]))], scale = 'row', annotation_col = annot.df,
color = colorRampPalette(rev(brewer.pal(10, 'RdBu')))(100),
cluster_rows = TRUE, cluster_cols = FALSE, show_colnames = FALSE, show_rownames = TRUE,
main = 'Multiway K-Means Analysis')
#pca3d(r1.PCA)
r1.clust <- readRDS('C://Users/lvlah/linux/ac_lab/data/cardoso_lung/car-lung_r1-clusts.rds')
annot.df <- data.frame('clust' = as.factor(r1.clust$k3$clustering[names(sort(phiVals[1,]))]),
'phi' = sort(phiVals[1,]))
pheatmap(r1.pAct[markers,names(sort(phiVals[1,]))], scale = 'row', annotation_col = annot.df,
color = colorRampPalette(rev(brewer.pal(10, 'RdBu')))(100),
cluster_rows = TRUE, cluster_cols = FALSE, show_colnames = FALSE, show_rownames = TRUE,
main = 'Multiway K-Means Analysis')
remove.packages('Seurat')
install.packages('devtools') devtools::install_version(package = 'Seurat', version = package_version('2.3.4'))
devtools::install_version(package = 'Seurat', version = package_version('2.3.4'))
library(Seurat)
devtools::install_version(package = 'Seurat', version = package_version('2.3.4'))
library(Seurat)
library(dplyr)
library(Matrix)
library(knitr)
library(scater)
packageurl <- "https://bioconductor.org/packages/3.8/bioc/src/contrib/Archive/scater/scater_1.10.0.tar.gz"
install.packages(packageurl, repos=NULL, type="source")
packageurl <- "https://cran.r-project.org/src/contrib/kableExtra_1.1.0.tar.gz"
install.packages(packageurl, repos=NULL, type="source")
pbmc.data <- Read10X(data.dir = "C://Users/lvlah/linux/ac_lab/scRNA_data/filtered_gene_bc_matrices/hg19/")
dense.size <- object.size(x = as.matrix(x = pbmc.data))
dense.size
sparse.size <- object.size(x = pbmc.data)
sparse.size
dim(pbmc.data)
counts_per_cell <- Matrix::colSums(pbmc.data)
counts_per_gene <- Matrix::rowSums(pbmc.data)
genes_per_cell <- Matrix::colSums(pbmc.data>0) # count gene only if it has non-zero reads mapped.
cells_per_gene <- Matrix::rowSums(pbmc.data>0)
hist(log10(counts_per_cell+1),main='counts per cell',col='wheat')
hist(log10(genes_per_cell+1), main='genes per cell', col='wheat')
plot(counts_per_cell, genes_per_cell, log='xy', col='brown')
title('counts vs genes per cell')
hist(log10(counts_per_gene+1), main='counts per gene', col='wheat')
plot(sort(genes_per_cell), xlab='cell', log='y', main='genes per cell (ordered)')
pbmc <- CreateSeuratObject(raw.data = pbmc.data, min.cells = 3, min.genes = 200,
project = "10X_PBMC")
pbmc
mito.genes <- grep(pattern = "^MT-", x = rownames(x = pbmc@data), value = TRUE)
mito.genes %>% kable() %>% kable_styling()
library(kableExtra)
packageurl <- "https://cran.r-project.org/src/contrib/kableExtra_1.1.0.tar.gz"
install.packages(packageurl, repos=NULL, type="source")
percent.mito <- Matrix::colSums(pbmc@raw.data[mito.genes, ])/Matrix::colSums(pbmc@raw.data)
pbmc <- AddMetaData(object = pbmc, metadata = percent.mito, col.name = "percent.mito")
head(pbmc@meta.data)
VlnPlot(object = pbmc, features.plot = c("nGene", "nUMI", "percent.mito"), nCol = 3)
install.packages(packageurl, repos=NULL, type="source")
install.packages('rvest')
install.packages('readr')
install.packages(packageurl, repos=NULL, type="source")
mito.genes %>% kable() %>% kable_styling()
library(kableExtra)
mito.genes <- grep(pattern = "^MT-", x = rownames(x = pbmc@data), value = TRUE)
mito.genes %>% kable() %>% kable_styling()
percent.mito <- Matrix::colSums(pbmc@raw.data[mito.genes, ])/Matrix::colSums(pbmc@raw.data)
pbmc <- AddMetaData(object = pbmc, metadata = percent.mito, col.name = "percent.mito")
head(pbmc@meta.data)
VlnPlot(object = pbmc, features.plot = c("nGene", "nUMI", "percent.mito"), nCol = 3)
par(mfrow = c(1, 2))
GenePlot(object = pbmc, gene1 = "nUMI", gene2 = "percent.mito")
GenePlot(object = pbmc, gene1 = "nUMI", gene2 = "nGene")
hkgenes <- read.table("housekeeping_genes.txt")
pbmc <- FilterCells(object = pbmc, subset.names = c("nGene", "percent.mito"),
low.thresholds = c(200, -Inf), high.thresholds = c(2500, 0.05))
pbmc <- NormalizeData(object = pbmc, normalization.method = "LogNormalize",
scale.factor = 10000)
pbmc <- FindVariableGenes(object = pbmc, mean.function = ExpMean, dispersion.function = LogVMR,
x.low.cutoff = 0.0125, x.high.cutoff = 3, y.cutoff = 0.5)
length(x = pbmc@var.genes)
pbmc <- ScaleData(object = pbmc, vars.to.regress = c("nUMI", "percent.mito"))
pbmc <- RunPCA(object = pbmc, pc.genes = pbmc@var.genes, do.print = TRUE, pcs.print = 1:5,
genes.print = 5)
VizPCA(object = pbmc, pcs.use = 1:2)
PCAPlot(object = pbmc, dim.1 = 1, dim.2 = 2)
pbmc <- ProjectPCA(object = pbmc, do.print = FALSE)
PCHeatmap(object = pbmc, pc.use = 1, cells.use = 500, do.balanced = TRUE, label.columns = FALSE)
PCHeatmap(object = pbmc, pc.use = 1:12, cells.use = 500, do.balanced = TRUE,
label.columns = FALSE, use.full = FALSE)
pbmc <- JackStraw(object = pbmc, num.replicate = 100, display.progress = FALSE)
JackStrawPlot(object = pbmc, PCs = 1:12)
pbmc <- RunTSNE(object = pbmc, dims.use = 1:10, do.fast = TRUE)
TSNEPlot(object = pbmc)
cluster1.markers <- FindMarkers(object = pbmc, ident.1 = 1, min.pct = 0.25)
PCs
JackStrawPlot(object = pbmc, PCs = 1:12)
pbmc <- FindClusters(object = pbmc, reduction.type = "pca", dims.use = 1:10,
resolution = 0.6, print.output = 0, save.SNN = TRUE)
PrintFindClustersParams(object = pbmc)
pbmc <- RunTSNE(object = pbmc, dims.use = 1:10, do.fast = TRUE)
TSNEPlot(object = pbmc)
cluster1.markers <- FindMarkers(object = pbmc, ident.1 = 1, min.pct = 0.25)
print(x = head(x = cluster1.markers, n = 5)) %>% kable() %>% kable_styling()
cluster5.markers <- FindMarkers(object = pbmc, ident.1 = 5, ident.2 = c(0, 3),
min.pct = 0.25)
print(x = head(x = cluster5.markers, n = 5)) %>% kable() %>% kable_styling()
pbmc.markers <- FindAllMarkers(object = pbmc, only.pos = TRUE, min.pct = 0.25,
thresh.use = 0.25)
pbmc.markers %>% group_by(cluster) %>% top_n(2, avg_logFC)
VlnPlot(object = pbmc, features.plot = c("MS4A1", "CD79A"))
VlnPlot(object = pbmc, features.plot = c("LGALS2"))
source('C://Users/lvlah/linux/ac_lab/single-cell-pipeline/functions/process-utils.R')
source('C://Users/lvlah/linux/ac_lab/single-cell-pipeline/functions/cluster-functions.R')
source('C://Users/lvlah/linux/ac_lab/single-cell-pipeline/functions/viper-utils.R')
library(Matrix)
library(biomaRt)
library(viper)
### MARKER SETS ###
path <- 'C://Users/lvlah/linux/ac_lab/data/pda_olive/MGI_markers/'
marker.sets <- list()
for (f in list.files(path)) {
file <- paste(path, f, sep = '')
m <- strsplit(f, '\\.')[[1]][1]; print(m)
m.set <- read.table(file, header = TRUE, sep = '\t', stringsAsFactors = FALSE)
marker.sets[[m]] <- m.set$Input
}
## create dummy regulon
#' Creates a dummy regulon from a given gene list.
#'
#' @param gene.list List of genes.
#' @return List with two elements; likelihood and tfmode
MakeReg <- function(gene.list) {
likelihood <- rep(1, length(gene.list))
tf.mode <- rep(1, length(gene.list)); names(tf.mode) <- gene.list
d.reg <- list('tfmode' = tf.mode, 'likelihood' = likelihood)
return(d.reg)
}
raw.mat <- readRDS('C://Users/lvlah/linux/ac_lab/data/pda_olive/mouse-pda_raw.rds')
cpm.mat <- readRDS('C://Users/lvlah/linux/ac_lab/data/pda_olive/mouse-pda_cpm.rds')
rank.mat <- readRDS('C://Users/lvlah/linux/ac_lab/data/pda_olive/mouse-pda_rank.rds')
marker.reg <- list()
for (m in names(marker.sets)) {
m.set <- marker.sets[[m]]
m.set <- lapply(m.set, function(x) { paste(substr(x, 1, 1), tolower(substr(x, 2, nchar(x))), sep = '') })
m.set <- intersect(m.set, rownames(rank.mat))
marker.reg[[as.character(m)]] <- MakeReg(m.set)
}
class(marker.reg) <- "regulon"
## GSEA using marker sets
marker.vip <- viper(rank.mat, marker.reg, method = 'none', minsize = 1)
marker.vip
dim(marker.vip)
library(pheatmap)
library(RColorBrewer)
head(rownames(cpm.mat))
'Cxcr7' %in% rownames(cpm.mat)
'Cxcr7' %in% rownames(raw.mat)
raw.mat <- as.matrix(readMM('C://Users/lvlah/linux/ac_lab/data/pda_olive/count_data/matrix.mtx'))
genes <- read.table('C://Users/lvlah/linux/ac_lab/data/pda_olive/count_data/features.tsv', sep = '\t')
barcodes <- read.table('C://Users/lvlah/linux/ac_lab/data/pda_olive/count_data/barcodes.tsv', sep = '\t')
colnames(raw.mat) <- barcodes[,1]
rownames(raw.mat) <- genes[,1]
'ENSMUSG00000044337' %in% rownames(raw.mat)
filt.mat <- QCTransform(raw.mat)
cpm.mat <- CPMTransform(filt.mat)
'ENSMUSG00000044337' %in% rownames(cpm.mat)
pheatmap(marker.vip, main = 'Mouse GSEA Clust', width = 6, height = 8, scale = 'row',
cluster_rows = FALSE, cluster_cols = TRUE, show_rownames = TRUE, show_colnames = FALSE,
color = colorRampPalette(colors = c('blue', 'white', 'red'))(100),  fontsize_row = 4,
annotation_col = data.frame('Cxcr7' = cpm.mat['ENSMUSG00000044337',]))
pheatmap(marker.vip, main = 'Mouse GSEA Clust', width = 6, height = 8, scale = 'row',
cluster_rows = FALSE, cluster_cols = TRUE, show_rownames = TRUE, show_colnames = FALSE,
color = colorRampPalette(colors = c('blue', 'white', 'red'))(100),  fontsize_row = 8,
annotation_col = data.frame('Cxcr7' = cpm.mat['ENSMUSG00000044337',]))
View(cpm.mat)
head(sort(cpm.mat['ENSMUSG00000044337',]))
head(sort(cpm.mat['ENSMUSG00000044337',], decreasing = TRUE))
pheatmap(marker.vip, main = 'Mouse GSEA Clust', width = 6, height = 8, scale = 'row',
cluster_rows = FALSE, cluster_cols = TRUE, show_rownames = TRUE, show_colnames = FALSE,
color = colorRampPalette(colors = c('blue', 'white', 'red'))(100),  fontsize_row = 8,
annotation_col = data.frame('Cxcr7' = raw.mat['ENSMUSG00000044337', colnames(marker.vip)]))
library(cluster)
## clustering
gsea.clust <- pam(t(marker.vip), k = 5)
gsea.clust$clustering
pheatmap(marker.vip[, names(sort(gsea.clust$clustering)) ], main = 'Mouse GSEA Clust', width = 6, height = 8, scale = 'row',
cluster_rows = FALSE, cluster_cols = FALSE, show_rownames = FALSE, show_colnames = FALSE,
color = colorRampPalette(colors = c('blue', 'white', 'red'))(100),  fontsize_row = 8,
annotation_col = annot.df)
annot.df <- data.frame('clust' = gsea.clust$clustering, 'Cxcr7' = cpm.mat['ENSMUSG00000044337', ])
pheatmap(marker.vip[, names(sort(gsea.clust$clustering)) ], main = 'Mouse GSEA Clust', width = 6, height = 8, scale = 'row',
cluster_rows = FALSE, cluster_cols = FALSE, show_rownames = FALSE, show_colnames = FALSE,
color = colorRampPalette(colors = c('blue', 'white', 'red'))(100),  fontsize_row = 8,
annotation_col = annot.df)
annot.df <- data.frame('clust' = gsea.clust$clustering, 'Cxcr7' = cpm.mat['ENSMUSG00000044337', names(gsea.clust$clustering)])
pheatmap(marker.vip[, names(sort(gsea.clust$clustering)) ], main = 'Mouse GSEA Clust', width = 6, height = 8, scale = 'row',
cluster_rows = FALSE, cluster_cols = FALSE, show_rownames = FALSE, show_colnames = FALSE,
color = colorRampPalette(colors = c('blue', 'white', 'red'))(100),  fontsize_row = 8,
annotation_col = annot.df)
annot.df <- data.frame('clust' = as.factor(gsea.clust$clustering), 'Cxcr7' = cpm.mat['ENSMUSG00000044337', names(gsea.clust$clustering)])
pheatmap(marker.vip[, names(sort(gsea.clust$clustering)) ], main = 'Mouse GSEA Clust', width = 6, height = 8, scale = 'row',
cluster_rows = FALSE, cluster_cols = FALSE, show_rownames = FALSE, show_colnames = FALSE,
color = colorRampPalette(colors = c('blue', 'white', 'red'))(100),  fontsize_row = 8,
annotation_col = annot.df)
pheatmap(marker.vip[, names(sort(gsea.clust$clustering)) ], main = 'Mouse GSEA Clust', width = 6, height = 8, scale = 'row',
cluster_rows = FALSE, cluster_cols = FALSE, show_rownames = TRUE, show_colnames = FALSE,
color = colorRampPalette(colors = c('blue', 'white', 'red'))(100),  fontsize_row = 8,
annotation_col = annot.df)
## get average expression for each clsuter
for (i in 1:5) {
clust.cells <- which(gsea.clust$clustering == i)
mean.exp <- mean(cpm.mat['ENSMUSG00000044337', clust.cells])
print(mean.exp)
}
### HUMAN ###
raw.human.mat <- readRDS('C://Users/lvlah/linux/ac_lab/data/pda_olive/ht99_geneExp.rds')
## convert to gene symbol
raw.human.mat <- Ensemble2GeneName(raw.human.mat)
cpm.human.mat <- CPMTransform(raw.human.mat)
rank.human.mat <- RankTransform(cpm.human.mat)
saveRDS(cpm.human.mat, 'C://Users/lvlah/linux/ac_lab/data/pda_olive/ht99_cpm.rds')
saveRDS(rank.human.mat, 'C://Users/lvlah/linux/ac_lab/data/pda_olive/ht99_rank.rds')
## create human marker set
marker.human.reg <- list()
for (m in names(marker.sets)) {
m.set <- marker.sets[[m]]
m.set <- lapply(m.set, function(x) { paste(substr(x, 1, 1), tolower(substr(x, 2, nchar(x))), sep = '') })
m.set <- intersect(m.set, rownames(rank.human.mat))
marker.human.reg[[as.character(m)]] <- MakeReg(m.set)
}
class(marker.human.reg) <- "regulon"
## GSEA using marker set
marker.human.vip <- viper(rank.mat, marker.reg, method = 'none')
## GSEA using marker set
marker.human.vip <- viper(rank.mat, marker.reg, method = 'none', minsize = 1)
head(rownames(cpm.human.mat))
'CXCR7' %in% rownames(cpm.human.mat)
'ACKR3' %in% rownames(cpm.human.mat)
gsea.clust.human <- pam(t(marker.human.vip), k = 5)
## pheatmap
annot.df <- data.frame('clust' = as.factor(gsea.clust.human$clustering), 'Cxcr7' = cpm.human.mat['ACKR3', names(gsea.clust.human$clustering)])
pheatmap(marker.vip[, names(sort(gsea.clust$clustering)) ], main = 'Mouse GSEA Clust', width = 6, height = 8, scale = 'row',
cluster_rows = FALSE, cluster_cols = FALSE, show_rownames = TRUE, show_colnames = FALSE,
color = colorRampPalette(colors = c('blue', 'white', 'red'))(100),  fontsize_row = 8,
annotation_col = annot.df)
## pheatmap
annot.df <- data.frame('clust' = as.factor(gsea.clust.human$clustering), 'Cxcr7' = cpm.human.mat['ACKR3', names(gsea.clust.human$clustering)])
pheatmap(marker.human.vip[, names(sort(gsea.clust.human$clustering)) ], main = 'Human GSEA Clust', width = 6, height = 8, scale = 'row',
cluster_rows = FALSE, cluster_cols = FALSE, show_rownames = TRUE, show_colnames = FALSE,
color = colorRampPalette(colors = c('blue', 'white', 'red'))(100),  fontsize_row = 8,
annotation_col = annot.df)
## pheatmap
annot.df <- data.frame('clust' = as.factor(gsea.clust.human$clustering), 'Cxcr7' = cpm.human.mat['ACKR3', names(gsea.clust.human$clustering)])
## pheatmap
annot.df <- data.frame('clust' = as.factor(gsea.clust.human$clustering), 'Cxcr7' = cpm.human.mat['ACKR3', ])
dim(marker.human.vip)
dim(cpm.human.mat)
## create human marker set
marker.human.reg <- list()
for (m in names(marker.sets)) {
m.set <- marker.sets[[m]]
m.set <- intersect(m.set, rownames(rank.human.mat))
marker.human.reg[[as.character(m)]] <- MakeReg(m.set)
}
class(marker.human.reg) <- "regulon"
marker.human.vip <- viper(rank.human.mat, marker.reg, method = 'none', minsize = 1)
m.set
marker.human.vip <- viper(rank.human.mat, marker.human.reg, method = 'none', minsize = 1)
## clustering
gsea.clust.human <- pam(t(marker.human.vip), k = 5)
## pheatmap
annot.df <- data.frame('clust' = as.factor(gsea.clust.human$clustering), 'Cxcr7' = cpm.human.mat['ACKR3', ])
pheatmap(marker.human.vip[, names(sort(gsea.clust.human$clustering)) ], main = 'Human GSEA Clust', width = 6, height = 8, scale = 'row',
cluster_rows = FALSE, cluster_cols = FALSE, show_rownames = TRUE, show_colnames = FALSE,
color = colorRampPalette(colors = c('blue', 'white', 'red'))(100),  fontsize_row = 8,
annotation_col = annot.df)
## get average expression for each clsuter
for (i in 1:5) {
clust.cells <- which(gsea.clust$clustering == i)
mean.exp <- mean(cpm.mat['ENSMUSG00000044337', clust.cells])
print(mean.exp)
}
## get average expression for each clsuter
for (i in 1:5) {
clust.cells <- which(gsea.clust.human$clustering == i)
mean.exp <- mean(cpm.human.mat['ENSMUSG00000044337', clust.cells])
print(mean.exp)
}
## get average expression for each clsuter
for (i in 1:5) {
clust.cells <- which(gsea.clust.human$clustering == i)
mean.exp <- mean(cpm.human.mat['ACKR3', clust.cells])
print(mean.exp)
}
### MOUSE ###
raw.mat <- readRDS('C://Users/lvlah/linux/ac_lab/data/pda_olive/mouse-pda_raw.rds')
cpm.mat <- readRDS('C://Users/lvlah/linux/ac_lab/data/pda_olive/mouse-pda_cpm.rds')
rank.mat <- readRDS('C://Users/lvlah/linux/ac_lab/data/pda_olive/mouse-pda_rank.rds')
'Rdc1' %in% rownames(cpm.mat)
'Cxcr7' %in% rownames(cpm.mat)
head(rownames(cpm.mat))
'Cxcr7' %in% rownames(raw.mat)
'Rdc1' %in% rownames(raw.mat)
'Ackr3' %in% rownames(raw.mat)
'Ackr3' %in% rownames(cpm.mat)
?viperSignature
source('C://Users/lvlah/linux/ac_lab/single-cell-pipeline/functions/process-utils.R')
source('C://Users/lvlah/linux/ac_lab/single-cell-pipeline/functions/cluster-functions.R')
source('C://Users/lvlah/linux/ac_lab/single-cell-pipeline/functions/viper-utils.R')
source('C://Users/lvlah/linux/ac_lab/single-cell-pipeline/functions/process-utils.R')
source('C://Users/lvlah/linux/ac_lab/single-cell-pipeline/functions/cluster-functions.R')
source('C://Users/lvlah/linux/ac_lab/single-cell-pipeline/functions/viper-utils.R')
## PIPELINE r2
r2.pAct <- readRDS('C://Users/lvlah/linux/ac_lab/data/pda_olive/mps_r2-pAct.rds')
r2.cbcMRs <- CBCMRs(r2.pAct) # identify the most representative proteins
r2.pAct.cbc <- r2.pAct[ r2.cbcMRs ,] # filter the protein activity matrix
r2.louvain <- LouvainClust(r2.pAct.cbc) # perform clustering analysis
r2.cbcUMAP <- CustomUMAP(r2.pAct.cbc)
ClusterScatter(r2.cbcUMAP, r2.louvain, 'Viper Clustering (Louvain)')
m.set
marker.sets
markers <- c('Ackr3', marker.sets$endothelial)
markers
markers <- c('Ackr3', lapply(marker.sets$endothelial, function(x) { paste(substr(x, 1, 1), tolower(substr(x, 2, nchar(x))), sep = '') })
)
markers
markers <- c('Ackr3', unlist( lapply(marker.sets$endothelial, function(x)
{ paste(substr(x, 1, 1), tolower(substr(x, 2, nchar(x))), sep = '') })))
markers
MarkerGrid(r2.cbcUMAP, r2.louvain, r2.pAct, markers, 'Endothelial Marker Activity')
source('C://Users/lvlah/linux/ac_lab/single-cell-pipeline/functions/process-utils.R')
source('C://Users/lvlah/linux/ac_lab/single-cell-pipeline/functions/cluster-functions.R')
source('C://Users/lvlah/linux/ac_lab/single-cell-pipeline/functions/viper-utils.R')
MarkerGrid(r2.cbcUMAP, r2.louvain, r2.pAct, markers, 'Endothelial Marker Activity')
source('C://Users/lvlah/linux/ac_lab/single-cell-pipeline/functions/process-utils.R')
source('C://Users/lvlah/linux/ac_lab/single-cell-pipeline/functions/cluster-functions.R')
source('C://Users/lvlah/linux/ac_lab/single-cell-pipeline/functions/viper-utils.R')
MarkerGrid(r2.cbcUMAP, r2.louvain, r2.pAct, markers, 'Endothelial Marker Activity')
source('C://Users/lvlah/linux/ac_lab/single-cell-pipeline/functions/process-utils.R')
source('C://Users/lvlah/linux/ac_lab/single-cell-pipeline/functions/cluster-functions.R')
source('C://Users/lvlah/linux/ac_lab/single-cell-pipeline/functions/viper-utils.R')
MarkerGrid(r2.cbcUMAP, r2.louvain, r2.pAct, markers, 'Endothelial Marker Activity')
dev.off()
MarkerGrid(r2.cbcUMAP, r2.louvain, r2.pAct, markers, 'Endothelial Marker Activity')
source('C://Users/lvlah/linux/ac_lab/single-cell-pipeline/functions/cluster-functions.R'\
source('C://Users/lvlah/linux/ac_lab/single-cell-pipeline/functions/cluster-functions.R'
)
MarkerGrid(r2.cbcUMAP, r2.louvain, r2.pAct, markers, 'Endothelial Marker Activity')
source('C://Users/lvlah/linux/ac_lab/single-cell-pipeline/functions/cluster-functions.R')
MarkerGrid(r2.cbcUMAP, r2.louvain, r2.pAct, markers, 'Endothelial Marker Activity')
length(markers)
source('C://Users/lvlah/linux/ac_lab/single-cell-pipeline/functions/cluster-functions.R')
length(markers)
MarkerGrid(r2.cbcUMAP, r2.louvain, r2.pAct, markers, 'Endothelial Marker Activity')
markers <- c('Ackr3', unlist( lapply(marker.sets$epithelial, function(x)
{ paste(substr(x, 1, 1), tolower(substr(x, 2, nchar(x))), sep = '') })))
MarkerGrid(r2.cbcUMAP, r2.louvain, r2.pAct, markers, 'Epithelial Marker Activity')
source('C://Users/lvlah/linux/ac_lab/single-cell-pipeline/functions/cluster-functions.R')
markers <- c('Ackr3', unlist( lapply(marker.sets$endothelial, function(x)
{ paste(substr(x, 1, 1), tolower(substr(x, 2, nchar(x))), sep = '') })))
MarkerGrid(r2.cbcUMAP, r2.louvain, r2.pAct, markers, 'Endothelial Marker Activity')
markers <- c('Ackr3', unlist( lapply(marker.sets$epithelial, function(x)
{ paste(substr(x, 1, 1), tolower(substr(x, 2, nchar(x))), sep = '') })))
MarkerGrid(r2.cbcUMAP, r2.louvain, r2.pAct, markers, 'Epithelial Marker Activity')
markers <- c('Ackr3', unlist( lapply(marker.sets$fibroblast, function(x)
{ paste(substr(x, 1, 1), tolower(substr(x, 2, nchar(x))), sep = '') })))
MarkerGrid(r2.cbcUMAP, r2.louvain, r2.pAct, markers, 'Fibroblast Marker Activity')
markers <- c('Ackr3', unlist( lapply(marker.sets$immune, function(x)
{ paste(substr(x, 1, 1), tolower(substr(x, 2, nchar(x))), sep = '') })))
MarkerGrid(r2.cbcUMAP, r2.louvain, r2.pAct, markers, 'Immune Marker Activity')
markers <- c('Ackr3', unlist( lapply(marker.sets$pericytes, function(x)
{ paste(substr(x, 1, 1), tolower(substr(x, 2, nchar(x))), sep = '') })))
MarkerGrid(r2.cbcUMAP, r2.louvain, r2.pAct, markers, 'Pericyte Marker Activity')
devtools::install_github("xu-lab/SLICE")
devtools::install_github("xu-lab/SLICE")
Sys.getenv("R_LIBS_USER")
##packages and wd
source('C://Users/lvlah/linux/ac_lab/single-cell-pipeline/functions/cluster-functions.R')
source('C://Users/lvlah/linux/ac_lab/single-cell-pipeline/functions/viper-utils.R')
source('C://Users/lvlah/linux/ac_lab/single-cell-pipeline/functions/process-utils.R')
mt.genes <- read.table('C://Users/lvlah/linux/ac_lab/single-cell-pipeline/mt-genes.csv',
header = TRUE, sep = ',', stringsAsFactors = FALSE)
library(SingleR)
setwd('C://Users/lvlah/linux/ac_lab/PISCES/')
devtools::document(); devtools::install()
