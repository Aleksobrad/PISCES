net.obj$ENSG00000000003$tfmode
wt.vec <- net.obj$ENSG00000000003$tfmode
wt.vec <- wt.vec / max(wt.vec)
wt.vec <- wt.vec / sum(wt.vec)
wt.vec
'ENSG00000168813' %in% names(wt.vec)
'ENSG00000105854' %in% names(wt.vec)
wt.vec['ENSG00000105854']
wt.vec['ENSG00000136044']
head(net.obj$ENSG00000000003$tfmode)
head(net.obj$ENSG00000000003$likelihood)
wtss <- scale(wts, center = FALSE, scale = colSums(wts))
head(wtss)
wts.vec <- net.obj$ENSG00000000003$likelihood
wts.vec <- wts.vec / max(wts.vec)
wts.vec <- wts.vec / sum(wts.vec)
wts.vec['ENSG00000105854']
head(wts.vec)
match('ENSG00000105854', names(net.obj$ENSG00000000003$tfmode))
wts.vec[match('ENSG00000105854', names(net.obj$ENSG00000000003$tfmode))]
wts.vec[match('ENSG00000147475', names(net.obj$ENSG00000000003$tfmode))]
net.obj$ENSG00000000003$tfmode
net.obj$ENSG00000000003$tfmode['ENSG00000105854']
net.obj$ENSG00000000003$tfmode['ENSG00000164904']
net.obj$ENSG00000000003$tfmode['ENSG00000147475']
viper(ges.mat[,1:3], net.obj[1:3], eset.filter = FALSE)
### GES adjustment
t2.obj <- apply(ges.mat[,1:2], 2, rank) / (nrow(ges.mat) + 1)
t2q.obj <- qnorm(t2.obj)
t1.obj <- abs(t2.obj - 0.5) * 2
t1.obj <- t1.obj + (1 - max(t1.obj)) / 2
t1q.obj <- qnorm(t1.obj)
t(mor * wtss)
mor <- sapply(net.obj[1:3], function(x, genes) {
return(x$tfmode[match(genes, names(x$tfmode))])
}, genes = targets)
wts <- sapply(net.obj[1:3], function(x, genes) {
tmp <- x$likelihood[match(genes, names(x$tfmode))]
tmp[is.na(match(genes, names(x$tfmode)))] <- NA
return(tmp/max(tmp, na.rm = T))
}, genes = targets)
mor[is.na(mor)] <- 0
wts[is.na(wts)] <- 0
wtss <- scale(wts, center = FALSE, scale = colSums(wts))
t(mor*wtss)
dim(t(mor*wtss))
mor*wtss
### MOR and weight matrices
targets <- unique(unlist(lapply(net.obj[1:3], function(x) names(x$tfmode)), use.names = FALSE))
t(mor*wtss) %*% t2q[targets,]
t(mor*wtss) %*% t2q.obj[targets,]
## 1-tail
t1.es <- t((1 - abs(mor)) * wtss) %*% t1q.obj[targets,]
t1.es
## 2-tail
t2.es <- t(mor*wtss) %*% t2q.obj[targets,]
## 1-tail
t1.es <- t((1 - abs(mor)) * wtss) %*% t1q.obj[targets,]
ss <- sign(t2.es)
tot.es <- (abs(t2.es) + t1.es * (t1.es > 0)) * ss
tot.es
viper(ges.mat[,1:2], net.obj[1:3], eset.filter = FALSE)
## make NES
lwt <- sqrt(colsums(wts**2))
nes <- tot.es * lwt
## make NES
lwt <- sqrt(colSums(wts**2))
nes <- tot.es * lwt
nes
lwt
library(Seurat)
library(ggplot2)
setwd('C://Users/lvlah/linux/ac_lab/PISCES-dev/')
bootcamp.dir <- 'C://Users/lvlah/linux/ac_lab/sc-bootcamp_21/'
devtools::document(); devtools::load_all()
## load data
seur.obj <- readRDS(paste(bootcamp.dir, 'cbmc_gene_seurat.rds', sep = ''))
abt.mat <- seur.obj@assays$ADT
rna.mat <- as.matrix(seur.obj@assays$RNA@counts)
# create seurat object
seurat.obj <- CreateSeuratObject(counts = rna.mat, project = 'sc-bootcamp', min.cells = 3, min.features = 200)
## QC analysis
mt.features <- intersect(mt.genes$hum.symb, rownames(seurat.obj))
seurat.obj[["percent.mt"]] <- PercentageFeatureSet(object = seurat.obj, features = mt.features)
QCPlots(seurat.obj)
## filtration and SCT normalization
seurat.obj <- subset(seurat.obj, subset = nCount_RNA > 1000 & nFeature_RNA < 3000 & percent.mt < 10)
seurat.obj <- SCTransform(seurat.obj, vars.to.regress = 'percent.mt', verbose = FALSE)
## seurat gene expression clustering
seurat.obj <- RunPCA(seurat.obj, verbose = FALSE)
seurat.obj <- FindNeighbors(seurat.obj, dims = 1:30, verbose = FALSE)
seurat.obj <- FindClusters(seurat.obj, verbose = FALSE)
## create distance matrix
seurat.obj <- CorDist(seurat.obj)
seurat.obj <- LouvainResRange(seurat.obj)
## seurat gene expression clustering
seurat.obj <- RunPCA(seurat.obj, verbose = FALSE)
seurat.obj <- FindNeighbors(seurat.obj, dims = 1:30, verbose = FALSE)
seurat.obj <- FindClusters(seurat.obj, resolution=seq(0.01,1,by=0.01), verbose = FALSE, algorithm=1)
## create distance matrix
seurat.obj <- CorDist(seurat.obj)
table(seurat.obj$SCT_snn_res.0.8)
## create seurat object
seurat.obj <- CreateSeuratObject(counts = rna.mat, project = 'sc-bootcamp', min.cells = 3, min.features = 200)
## QC analysis
mt.features <- intersect(mt.genes$hum.symb, rownames(seurat.obj))
seurat.obj[["percent.mt"]] <- PercentageFeatureSet(object = seurat.obj, features = mt.features)
QCPlots(seurat.obj)
## filtration and SCT normalization
seurat.obj <- subset(seurat.obj, subset = nCount_RNA > 1000 & nFeature_RNA < 3000 & percent.mt < 10)
seurat.obj <- SCTransform(seurat.obj, vars.to.regress = 'percent.mt', verbose = FALSE)
## seurat gene expression clustering
seurat.obj <- RunPCA(seurat.obj, verbose = FALSE)
seurat.obj <- FindNeighbors(seurat.obj, dims = 1:30, verbose = FALSE)
seurat.obj <- FindClusters(seurat.obj, resolution=seq(0.1,1,by=0.11), verbose = FALSE, algorithm=1)
seurat.obj <- FindClusters(seurat.obj, resolution=seq(0.1,1,by=0.1), verbose = FALSE, algorithm=1)
for (i in seq(0.1, 1, by = 0.1)) {
print(i)
}
## create distance matrix; identify optimal clustering by silhouette score
seurat.obj <- CorDist(seurat.obj)
sil.list <- list()
for (i in seq(0.1, 1, by = 0.1)) {
clust.name <- paste('SCT_snn_res.', i, sep = '')
clust.vect <- seurat.obj[[clust.name]]
sil.list[[clust.name]] <- cluster::silhouette(clust.vect, seurat.obj@assays$SCT@misc$dist.mat)
}
clust.vect
clust.vect[,1]
as.list(clust.vect)
for (i in seq(0.1, 1, by = 0.1)) {
clust.name <- paste('SCT_snn_res.', i, sep = '')
clust.vect <- seurat.obj[[clust.name]][,1]
sil.list[[clust.name]] <- cluster::silhouette(clust.vect, seurat.obj@assays$SCT@misc$dist.mat)
}
for (i in seq(0.1, 1, by = 0.1)) {
clust.name <- paste('SCT_snn_res.', i, sep = '')
clust.vect <- as.numeric(seurat.obj[[clust.name]][,1])
sil.list[[clust.name]] <- cluster::silhouette(clust.vect, seurat.obj@assays$SCT@misc$dist.mat)
}
sil.list
sil.list <- list()
for (i in seq(0.1, 1, by = 0.1)) {
clust.name <- paste('SCT_snn_res.', i, sep = '')
clust.vect <- as.numeric(seurat.obj[[clust.name]][,1])
sil.list[[clust.name]] <- mean(cluster::silhouette(clust.vect, seurat.obj@assays$SCT@misc$dist.mat)[,3])
}
sil.list
table(seurat.obj$SCT_snn_res.0.1)
net.files <- list.files('C://Users/lvlah/linux/ac_lab/sc-bootcamp_21/ao_mcell-nets/', full.names = TRUE)
net.list <- list()
for (i in 1:length(net.files)) {
net.list[[i]] <- readRDS(net.files[i])
}
saveRDS(net.list, file = 'C://Users/lvlah/linux/ac_lab/sc-bootcamp_21/cbmc_nets.rds')
## generate PISCES object; normalize, generate internal GES
seurat.obj <- AddPISCESAssay(seurat.obj)
seurat.obj <- CPMTransform(seurat.obj)
seurat.obj <- GESTransform(seurat.obj)
## run viper
vip.obj <- PISCESViper(seurat.obj, net.list)
# cluster
vip.obj <- CorDist(vip.obj)
vip.obj <- LouvainResRange(vip.obj, rmin = 10, rmax = 25)
# generate umap and mrs
vip.obj <- MakeUMAP(vip.obj)
vip.obj <- MWUMrs(vip.obj)
# plot clusters and markers
plot.dat <- data.frame('UMAP1' = vip.obj@assays$PISCES@misc$umap[,1], 'UMAP2' = vip.obj@assays$PISCES@misc$umap[,2],
'Cluster' = as.factor(vip.clust$clusterings[[which.max(vip.clust$sils)]]))
vip.obj <- LouvainResRange(vip.obj, rmin = 10, rmax = 100)
intersect(rownames(abt.mat), rownames(vip.obj@assays$PISCES@scale.data))
## antibody stuff
gene_to_protein <- data.frame(protein=c("CD3","CD3","CD3","CD4","CD8","CD8","CD45RA","CD56","CD16","CD16","CD14","CD19","CD34"),
gene=c("CD3D","CD3E","CD3G","CD4","CD8A","CD8B","PTPRC","NCAM1","FCGR3A","FCGR3B","CD14","CD19","CD34"))
intersect(rownames(vip.obj@assays$PISCES@scale.data), gene_to_protein$gene)
intersect(rownames(vip.obj@assays$PISCES@scale.data), gene_to_protein$protein)
vip.obj <- LouvainResRange(vip.obj, rmin = 10, rmax = 100)
table(vip.obj@assays$PISCES@misc$pisces.cluster)
vip.obj <- MWUMrs(vip.obj)
MRHeatmap(vip.obj)
dim(vip.obj@assays$PISCES@scale.data)
# plot clusters and markers
plot.dat <- data.frame('UMAP1' = vip.obj@assays$PISCES@misc$umap[,1], 'UMAP2' = vip.obj@assays$PISCES@misc$umap[,2],
'Cluster' = as.factor(vip.clust$clusterings[[which.max(vip.clust$sils)]]))
plot.dat <- cbind(plot.dat, t(abt.mat[,rownames(plot.dat)]))
plot.dat <- cbind(plot.dat, t(vip.obj@assays$PISCES@misc$viper[c('CD4', 'CD14'), rownames(plot.dat)]))
# plot clusters and markers
plot.dat <- data.frame('UMAP1' = vip.obj@assays$PISCES@misc$umap[,1], 'UMAP2' = vip.obj@assays$PISCES@misc$umap[,2],
'Cluster' = as.factor(vip.clust$clusterings[[which.max(vip.clust$sils)]]))
PlotClusters <- function(dat.obj, clust.vect) {
# get clustering from object
if (missing(clust.vect)) {
clust.vect <- dat.object@assays$PISCES@misc$pisces.cluster
}
# make plot.dat
plot.dat <- data.frame('UMAP1' = dat.obj@assays$PISCES@misc$umap[,1],
'UMAP2' = dat.obj@assays$PISCES@misc$umap[,2],
'Cluster' = as.factor(clust.vect))
# return plot
clust.plot <- ggplot(plot.dat, aes(UMAP1, UMAP2)) + geom_point(aes(color = Cluster))
return(clust.plot)
}
PlotClusters(vip.obj)
PlotClusters <- function(dat.object, clust.vect) {
# get clustering from object
if (missing(clust.vect)) {
clust.vect <- dat.object@assays$PISCES@misc$pisces.cluster
}
# make plot.dat
plot.dat <- data.frame('UMAP1' = dat.object@assays$PISCES@misc$umap[,1],
'UMAP2' = dat.object@assays$PISCES@misc$umap[,2],
'Cluster' = as.factor(clust.vect))
# return plot
clust.plot <- ggplot(plot.dat, aes(UMAP1, UMAP2)) + geom_point(aes(color = Cluster))
return(clust.plot)
}
PlotClusters(vip.obj)
marker.list <- gene_to_protein$protein
marker.list <- gene_to_protein$gene
# prune marker.list
marker.list <- intersect(marker.list, rownames(vip.obj@assays$PISCES@scale.data))
# make plot.dat
plot.dat <- data.frame('UMAP1' = vip.obj@assays$PISCES@misc$umap[,1],
'UMAP2' = vip.obj@assays$PISCES@misc$umap[,2])
plot.dat <- cbind(plot.dat, vip.obj@assays$PISCES@scale.data[marker.list,])
plot.dat <- cbind(plot.dat, t(vip.obj@assays$PISCES@scale.data[marker.list,]))
dim(plot.dat)
# plot clusters and markers
MarkerGrid <- function(vip.obj, marker.list) {
# prune marker.list
marker.list <- intersect(marker.list, rownames(vip.obj@assays$PISCES@scale.data))
# make plot.dat
plot.dat <- data.frame('UMAP1' = vip.obj@assays$PISCES@misc$umap[,1],
'UMAP2' = vip.obj@assays$PISCES@misc$umap[,2])
plot.dat <- cbind(plot.dat, t(vip.obj@assays$PISCES@scale.data[marker.list,]))
# make plots
plot.list <- list()
for (p in colnames(plot.dat)[2:ncol(plot.dat)]) {
plot.list[[p]] <- ggplot(plot.dat, aes(UMAP1, UMAP2)) + geom_point(aes(color = p)) +
ggtitle(p) + scale_color_gradientn(colors = c('blue', 'white', 'red'))
}
# arrange
nCol <- min(3, length(plot.list))
nRow <- ceiling(length(plot.list) / nCol)
# plot object
plot.obj <- ggpubr::ggarrange(plotlist = plot.list, ncol = nCol, nrow = nRow)
return(plot.obj)
}
MarkerGrid(vip.obj, marker.list)
# plot clusters and markers
MarkerGrid <- function(vip.obj, marker.list) {
# prune marker.list
marker.list <- intersect(marker.list, rownames(vip.obj@assays$PISCES@scale.data))
# make plot.dat
plot.dat <- data.frame('UMAP1' = vip.obj@assays$PISCES@misc$umap[,1],
'UMAP2' = vip.obj@assays$PISCES@misc$umap[,2])
plot.dat <- cbind(plot.dat, t(vip.obj@assays$PISCES@scale.data[marker.list,]))
# make plots
plot.list <- list()
for (p in colnames(plot.dat)[3:ncol(plot.dat)]) {
plot.list[[p]] <- ggplot(plot.dat, aes(UMAP1, UMAP2)) + geom_point(aes(color = p)) +
ggtitle(p) + scale_color_gradientn(colors = c('blue', 'white', 'red'))
}
# arrange
nCol <- min(3, length(plot.list))
nRow <- ceiling(length(plot.list) / nCol)
# plot object
plot.obj <- ggpubr::ggarrange(plotlist = plot.list, ncol = nCol, nrow = nRow)
return(plot.obj)
}
MarkerGrid(vip.obj, marker.list)
# plot clusters and markers
MarkerGrid <- function(vip.obj, marker.list) {
# prune marker.list
marker.list <- intersect(marker.list, rownames(vip.obj@assays$PISCES@scale.data))
# make plot.dat
plot.dat <- data.frame('UMAP1' = vip.obj@assays$PISCES@misc$umap[,1],
'UMAP2' = vip.obj@assays$PISCES@misc$umap[,2])
plot.dat <- cbind(plot.dat, t(vip.obj@assays$PISCES@scale.data[marker.list,]))
print(head(plot.dat))
# make plots
plot.list <- list()
for (p in colnames(plot.dat)[3:ncol(plot.dat)]) {
plot.list[[p]] <- ggplot(plot.dat, aes(UMAP1, UMAP2)) + geom_point(aes(color = p)) +
ggtitle(p) + scale_color_gradientn(colors = c('blue', 'white', 'red'))
}
# arrange
nCol <- min(3, length(plot.list))
nRow <- ceiling(length(plot.list) / nCol)
# plot object
plot.obj <- ggpubr::ggarrange(plotlist = plot.list, ncol = nCol, nrow = nRow)
return(plot.obj)
}
MarkerGrid(vip.obj, marker.list)
# plot clusters and markers
MarkerGrid <- function(vip.obj, marker.list) {
# prune marker.list
marker.list <- intersect(marker.list, rownames(vip.obj@assays$PISCES@scale.data))
# make plot.dat
plot.dat <- data.frame('UMAP1' = vip.obj@assays$PISCES@misc$umap[,1],
'UMAP2' = vip.obj@assays$PISCES@misc$umap[,2])
plot.dat <- cbind(plot.dat, t(vip.obj@assays$PISCES@scale.data[marker.list,]))
print(head(plot.dat))
# make plots
plot.list <- list()
for (p in colnames(plot.dat)[3:ncol(plot.dat)]) {
print(p)
plot.list[[p]] <- ggplot(plot.dat, aes(UMAP1, UMAP2)) + geom_point(aes(color = p)) +
ggtitle(p) + scale_color_gradientn(colors = c('blue', 'white', 'red'))
}
# arrange
nCol <- min(3, length(plot.list))
nRow <- ceiling(length(plot.list) / nCol)
# plot object
plot.obj <- ggpubr::ggarrange(plotlist = plot.list, ncol = nCol, nrow = nRow)
return(plot.obj)
}
# plot clusters and markers
MarkerGrid <- function(vip.obj, marker.list) {
# prune marker.list
marker.list <- intersect(marker.list, rownames(vip.obj@assays$PISCES@scale.data))
# make plot.dat
plot.dat <- data.frame('UMAP1' = vip.obj@assays$PISCES@misc$umap[,1],
'UMAP2' = vip.obj@assays$PISCES@misc$umap[,2])
plot.dat <- cbind(plot.dat, t(vip.obj@assays$PISCES@scale.data[marker.list,]))
print(head(plot.dat))
# make plots
plot.list <- list()
for (p in colnames(plot.dat)[3:ncol(plot.dat)]) {
print(p)
plot.list[[p]] <- ggplot(plot.dat, aes(UMAP1, UMAP2)) + geom_point(aes(color = p)) +
ggtitle(p) + scale_color_gradientn(colors = c('blue', 'white', 'red'))
}
# arrange
nCol <- min(3, length(plot.list))
nRow <- ceiling(length(plot.list) / nCol)
# plot object
plot.obj <- ggpubr::ggarrange(plotlist = plot.list, ncol = nCol, nrow = nRow)
return(plot.obj)
}
MarkerGrid(vip.obj, marker.list)
# plot clusters and markers
MarkerGrid <- function(vip.obj, marker.list) {
# prune marker.list
marker.list <- intersect(marker.list, rownames(vip.obj@assays$PISCES@scale.data))
# make plot.dat
plot.dat <- data.frame('UMAP1' = vip.obj@assays$PISCES@misc$umap[,1],
'UMAP2' = vip.obj@assays$PISCES@misc$umap[,2])
plot.dat <- cbind(plot.dat, t(vip.obj@assays$PISCES@scale.data[marker.list,]))
print(head(plot.dat))
# make plots
plot.list <- list()
for (p in colnames(plot.dat)[3:ncol(plot.dat)]) {
print(p)
plot.list[[p]] <- ggplot(plot.dat, aes(UMAP1, UMAP2)) + geom_point(aes(color = p)) +
ggtitle(p) + scale_color_gradientn(colors = c('blue', 'white', 'red'))
}
print(plot.list)
# arrange
nCol <- min(3, length(plot.list))
nRow <- ceiling(length(plot.list) / nCol)
# plot object
plot.obj <- ggpubr::ggarrange(plotlist = plot.list, ncol = nCol, nrow = nRow)
return(plot.obj)
}
MarkerGrid(vip.obj, marker.list)
dim(plot.dat)
ggplot(plot.dat, aes(UMAP1, UMAP2, color = CD19)) + geom_point()
ggplot(plot.dat, aes(UMAP1, UMAP2, color = CD19)) + geom_point() + scale_colour_gradient2(low = 'blue', mid = 'white', high = 'red')
# plot clusters and markers
MarkerGrid <- function(vip.obj, marker.list) {
# prune marker.list
marker.list <- intersect(marker.list, rownames(vip.obj@assays$PISCES@scale.data))
# make plot.dat
plot.dat <- data.frame('UMAP1' = vip.obj@assays$PISCES@misc$umap[,1],
'UMAP2' = vip.obj@assays$PISCES@misc$umap[,2])
plot.dat <- cbind(plot.dat, t(vip.obj@assays$PISCES@scale.data[marker.list,]))
print(head(plot.dat))
# make plots
plot.list <- list()
for (p in colnames(plot.dat)[3:ncol(plot.dat)]) {
print(p)
plot.list[[p]] <- ggplot(plot.dat, aes(UMAP1, UMAP2)) + geom_point(aes(color = p)) +
ggtitle(p) + scale_colour_gradient2(low = 'blue', mid = 'white', high = 'red')
}
print(plot.list)
# arrange
nCol <- min(3, length(plot.list))
nRow <- ceiling(length(plot.list) / nCol)
# plot object
plot.obj <- ggpubr::ggarrange(plotlist = plot.list, ncol = nCol, nrow = nRow)
return(plot.obj)
}
MarkerGrid(vip.obj, marker.list)
ggplot(plot.dat, aes(UMAP1, UMAP2, color = CD3D)) + geom_point() + scale_colour_gradient2(low = 'blue', mid = 'white', high = 'red')
# plot clusters and markers
MarkerGrid <- function(vip.obj, marker.list) {
# prune marker.list
marker.list <- intersect(marker.list, rownames(vip.obj@assays$PISCES@scale.data))
# make plot.dat
plot.dat <- data.frame('UMAP1' = vip.obj@assays$PISCES@misc$umap[,1],
'UMAP2' = vip.obj@assays$PISCES@misc$umap[,2])
plot.dat <- cbind(plot.dat, t(vip.obj@assays$PISCES@scale.data[marker.list,]))
print(head(plot.dat))
# make plots
plot.list <- list()
for (p in colnames(plot.dat)[3:ncol(plot.dat)]) {
print(p)
plot.list[[p]] <- ggplot(plot.dat, aes(UMAP1, UMAP2)) + geom_point(aes(color = p)) +
ggtitle(p) + scale_colour_gradient2(low = 'blue', mid = 'white', high = 'red')
}
# arrange
nCol <- min(3, length(plot.list))
nRow <- ceiling(length(plot.list) / nCol)
# plot object
plot.obj <- ggpubr::ggarrange(plotlist = plot.list, ncol = nCol, nrow = nRow)
return(plot.obj)
}
MarkerGrid(vip.obj, marker.list)
head(plot.dat)
# plot clusters and markers
MarkerGrid <- function(vip.obj, marker.list) {
# prune marker.list
marker.list <- intersect(marker.list, rownames(vip.obj@assays$PISCES@scale.data))
# make plot.dat
plot.dat <- data.frame('UMAP1' = vip.obj@assays$PISCES@misc$umap[,1],
'UMAP2' = vip.obj@assays$PISCES@misc$umap[,2])
plot.dat <- cbind(plot.dat, t(vip.obj@assays$PISCES@scale.data[marker.list,]))
print(head(plot.dat))
# make plots
plot.list <- list()
for (p in colnames(plot.dat)[3:ncol(plot.dat)]) {
print(p)
plot.list[[p]] <- ggplot(plot.dat, aes(UMAP1, UMAP2)) + geom_point(aes_string(color = p)) +
ggtitle(p) + scale_colour_gradient2(low = 'blue', mid = 'white', high = 'red')
}
# arrange
nCol <- min(3, length(plot.list))
nRow <- ceiling(length(plot.list) / nCol)
# plot object
plot.obj <- ggpubr::ggarrange(plotlist = plot.list, ncol = nCol, nrow = nRow)
return(plot.obj)
}
MarkerGrid(vip.obj, marker.list)
match(marker.list, gene_to_protein$gene)
ab.table <- gene_to_protein[match(marker.list, gene_to_protein$gene),]
ab.table
dim(abt.mat)
rownames(abt.mat)
## antibody stuff
gene_to_protein <- data.frame(abt=c("CD3","CD3","CD3","CD4","CD8","CD8","CD45RA","CD56","CD16","CD16","CD14","CD19","CD34"),
vip=c("CD3D","CD3E","CD3G","CD4","CD8A","CD8B","PTPRC","NCAM1","FCGR3A","FCGR3B","CD14","CD19","CD34"))
match(c(3, 4), c(1, 3, 1, 5, 4))
## antibody stuff
gene_to_protein <- data.frame(abt=c("CD3","CD3","CD3","CD4","CD8","CD8","CD45RA","CD56","CD16","CD16","CD14","CD19","CD34"),
vip=c("CD3D","CD3E","CD3G","CD4","CD8A","CD8B","PTPRC","NCAM1","FCGR3A","FCGR3B","CD14","CD19","CD34"))
ab.table <- gene_to_protein[match(rownames(abt.mat), gene_to_protein$abt),]
ab.table <- gene_to_protein[match(rownames(vip.obj@assays$PISCES@scale.data), gene_to_protein$vip),]
ab.table
## antibody stuff
gene_to_protein <- data.frame(abt=c("CD3","CD3","CD3","CD4","CD8","CD8","CD45RA","CD56","CD16","CD16","CD14","CD19","CD34"),
vip=c("CD3D","CD3E","CD3G","CD4","CD8A","CD8B","PTPRC","NCAM1","FCGR3A","FCGR3B","CD14","CD19","CD34"))
ab.table <- gene_to_protein[match(intersect(rownames(abt.mat), gene_to_protein$abt), gene_to_protein$abt),]
ab.table <- ab.table[match(intersect(rownames(vip.obj@assays$PISCES@scale.data), ab.table$vip), ab.table$vip),]
ab.table
saveRDS(ab.table, file = 'C://Users/lvlah/linux/ac_lab/sc-bootcamp_21/abt_name-map.rds')
MarkerGrid(vip.obj, ab.table$vip)
# compare to plots of antibody markers
plot.dat <- data.frame('UMAP1' = vip.obj@assays$PISCES@misc$umap[,1],
'UMAP2' = vip.obj@assays$PISCES@misc$umap[,2])
plot.dat <- cbind(plot.dat, t(abt.mat[ab.table$abt, colnames(vip.obj@assays$PISCES@scale.data)]))
ggplot(plot.dat, aes(UMAP1, UMAP2)) + geom_point(aes(color = CD14)) +
scale_color_gradient2(low = 'blue', mid = 'white', high = 'red')
abt.mat <- apply(abt.mat, 2, function(x) { (x - mean(x)) / sd(x) })
abt.mat <- apply(as.matrix(abt.mat), 2, function(x) { (x - mean(x)) / sd(x) })
class(abt.mat)
abt.mat <- seur.obj@assays$ADT@scale.data
plot.dat <- cbind(plot.dat, t(abt.mat[ab.table$abt, colnames(vip.obj@assays$PISCES@scale.data)]))
ggplot(plot.dat, aes(UMAP1, UMAP2)) + geom_point(aes(color = CD14)) +
scale_color_gradient2(low = 'blue', mid = 'white', high = 'red')
dim(abt.mat)
plot.dat
head(plot.dat)
# compare to plots of antibody markers
plot.dat <- data.frame('UMAP1' = vip.obj@assays$PISCES@misc$umap[,1],
'UMAP2' = vip.obj@assays$PISCES@misc$umap[,2])
plot.dat <- cbind(plot.dat, t(abt.mat[ab.table$abt, colnames(vip.obj@assays$PISCES@scale.data)]))
ggplot(plot.dat, aes(UMAP1, UMAP2)) + geom_point(aes(color = CD14)) +
scale_color_gradient2(low = 'blue', mid = 'white', high = 'red')
MarkerGrid(vip.obj, ab.table$vip)
ggplot(plot.dat, aes(UMAP1, UMAP2)) + geom_point(aes(color = CD4)) +
scale_color_gradient2(low = 'blue', mid = 'white', high = 'red')
MarkerGrid(vip.obj, ab.table$vip)
devtools::docuent()
devtools::document()
set.seed(343)
tutorial.samps <- sample(colnames(vip.mat), 1500)
## subset and save objects
vip.mat <- vip.obj@assays$PISCES@scale.data
set.seed(343)
tutorial.samps <- sample(colnames(rna.mat), 1500)
saveRDS(rna.mat[, tutorial.samps], paste(bootcamp.dir, 'rna_count-mat.rds', sep = ''))
saveRDS(abt.mat[, tutorial.samps], paste(bootcamp.dir, 'abt_mat.rds', sep = ''))
saveRDS(net.list, file = 'C://Users/lvlah/linux/ac_lab/sc-bootcamp_21/cbmc_nets.rds')
set.seed(7)
secondary.samps <- sample(setdiff(colnames(rna.mat), tutorial.samps), 4000)
secondary.samps <- sample(setdiff(colnames(rna.mat), tutorial.samps), 4000)
saveRDS(rna.mat[, secondary.samps], paste(bootcamp.dir, 'rna_count-mat_2.rds', sep = ''))
saveRDS(abt.mat[, secondary.samps], paste(bootcamp.dir, 'abt_mat_2.rds', sep = ''))
ab.table
saveRDS(ab.table, file = 'C://Users/lvlah/linux/ac_lab/sc-bootcamp_21/abt_name-map.rds')
