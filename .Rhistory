pheatmap(marker.vip, main = 'Mouse GSEA Clust', width = 6, height = 8, scale = 'row',
cluster_rows = FALSE, cluster_cols = TRUE, show_rownames = TRUE, show_colnames = FALSE,
color = colorRampPalette(colors = c('blue', 'white', 'red'))(100),  fontsize_row = 8,
annotation_col = data.frame('Cxcr7' = raw.mat['ENSMUSG00000044337', colnames(marker.vip)]))
library(cluster)
## clustering
gsea.clust <- pam(t(marker.vip), k = 5)
gsea.clust$clustering
pheatmap(marker.vip[, names(sort(gsea.clust$clustering)) ], main = 'Mouse GSEA Clust', width = 6, height = 8, scale = 'row',
cluster_rows = FALSE, cluster_cols = FALSE, show_rownames = FALSE, show_colnames = FALSE,
color = colorRampPalette(colors = c('blue', 'white', 'red'))(100),  fontsize_row = 8,
annotation_col = annot.df)
annot.df <- data.frame('clust' = gsea.clust$clustering, 'Cxcr7' = cpm.mat['ENSMUSG00000044337', ])
pheatmap(marker.vip[, names(sort(gsea.clust$clustering)) ], main = 'Mouse GSEA Clust', width = 6, height = 8, scale = 'row',
cluster_rows = FALSE, cluster_cols = FALSE, show_rownames = FALSE, show_colnames = FALSE,
color = colorRampPalette(colors = c('blue', 'white', 'red'))(100),  fontsize_row = 8,
annotation_col = annot.df)
annot.df <- data.frame('clust' = gsea.clust$clustering, 'Cxcr7' = cpm.mat['ENSMUSG00000044337', names(gsea.clust$clustering)])
pheatmap(marker.vip[, names(sort(gsea.clust$clustering)) ], main = 'Mouse GSEA Clust', width = 6, height = 8, scale = 'row',
cluster_rows = FALSE, cluster_cols = FALSE, show_rownames = FALSE, show_colnames = FALSE,
color = colorRampPalette(colors = c('blue', 'white', 'red'))(100),  fontsize_row = 8,
annotation_col = annot.df)
annot.df <- data.frame('clust' = as.factor(gsea.clust$clustering), 'Cxcr7' = cpm.mat['ENSMUSG00000044337', names(gsea.clust$clustering)])
pheatmap(marker.vip[, names(sort(gsea.clust$clustering)) ], main = 'Mouse GSEA Clust', width = 6, height = 8, scale = 'row',
cluster_rows = FALSE, cluster_cols = FALSE, show_rownames = FALSE, show_colnames = FALSE,
color = colorRampPalette(colors = c('blue', 'white', 'red'))(100),  fontsize_row = 8,
annotation_col = annot.df)
pheatmap(marker.vip[, names(sort(gsea.clust$clustering)) ], main = 'Mouse GSEA Clust', width = 6, height = 8, scale = 'row',
cluster_rows = FALSE, cluster_cols = FALSE, show_rownames = TRUE, show_colnames = FALSE,
color = colorRampPalette(colors = c('blue', 'white', 'red'))(100),  fontsize_row = 8,
annotation_col = annot.df)
## get average expression for each clsuter
for (i in 1:5) {
clust.cells <- which(gsea.clust$clustering == i)
mean.exp <- mean(cpm.mat['ENSMUSG00000044337', clust.cells])
print(mean.exp)
}
### HUMAN ###
raw.human.mat <- readRDS('C://Users/lvlah/linux/ac_lab/data/pda_olive/ht99_geneExp.rds')
## convert to gene symbol
raw.human.mat <- Ensemble2GeneName(raw.human.mat)
cpm.human.mat <- CPMTransform(raw.human.mat)
rank.human.mat <- RankTransform(cpm.human.mat)
saveRDS(cpm.human.mat, 'C://Users/lvlah/linux/ac_lab/data/pda_olive/ht99_cpm.rds')
saveRDS(rank.human.mat, 'C://Users/lvlah/linux/ac_lab/data/pda_olive/ht99_rank.rds')
## create human marker set
marker.human.reg <- list()
for (m in names(marker.sets)) {
m.set <- marker.sets[[m]]
m.set <- lapply(m.set, function(x) { paste(substr(x, 1, 1), tolower(substr(x, 2, nchar(x))), sep = '') })
m.set <- intersect(m.set, rownames(rank.human.mat))
marker.human.reg[[as.character(m)]] <- MakeReg(m.set)
}
class(marker.human.reg) <- "regulon"
## GSEA using marker set
marker.human.vip <- viper(rank.mat, marker.reg, method = 'none')
## GSEA using marker set
marker.human.vip <- viper(rank.mat, marker.reg, method = 'none', minsize = 1)
head(rownames(cpm.human.mat))
'CXCR7' %in% rownames(cpm.human.mat)
'ACKR3' %in% rownames(cpm.human.mat)
gsea.clust.human <- pam(t(marker.human.vip), k = 5)
## pheatmap
annot.df <- data.frame('clust' = as.factor(gsea.clust.human$clustering), 'Cxcr7' = cpm.human.mat['ACKR3', names(gsea.clust.human$clustering)])
pheatmap(marker.vip[, names(sort(gsea.clust$clustering)) ], main = 'Mouse GSEA Clust', width = 6, height = 8, scale = 'row',
cluster_rows = FALSE, cluster_cols = FALSE, show_rownames = TRUE, show_colnames = FALSE,
color = colorRampPalette(colors = c('blue', 'white', 'red'))(100),  fontsize_row = 8,
annotation_col = annot.df)
## pheatmap
annot.df <- data.frame('clust' = as.factor(gsea.clust.human$clustering), 'Cxcr7' = cpm.human.mat['ACKR3', names(gsea.clust.human$clustering)])
pheatmap(marker.human.vip[, names(sort(gsea.clust.human$clustering)) ], main = 'Human GSEA Clust', width = 6, height = 8, scale = 'row',
cluster_rows = FALSE, cluster_cols = FALSE, show_rownames = TRUE, show_colnames = FALSE,
color = colorRampPalette(colors = c('blue', 'white', 'red'))(100),  fontsize_row = 8,
annotation_col = annot.df)
## pheatmap
annot.df <- data.frame('clust' = as.factor(gsea.clust.human$clustering), 'Cxcr7' = cpm.human.mat['ACKR3', names(gsea.clust.human$clustering)])
## pheatmap
annot.df <- data.frame('clust' = as.factor(gsea.clust.human$clustering), 'Cxcr7' = cpm.human.mat['ACKR3', ])
dim(marker.human.vip)
dim(cpm.human.mat)
## create human marker set
marker.human.reg <- list()
for (m in names(marker.sets)) {
m.set <- marker.sets[[m]]
m.set <- intersect(m.set, rownames(rank.human.mat))
marker.human.reg[[as.character(m)]] <- MakeReg(m.set)
}
class(marker.human.reg) <- "regulon"
marker.human.vip <- viper(rank.human.mat, marker.reg, method = 'none', minsize = 1)
m.set
marker.human.vip <- viper(rank.human.mat, marker.human.reg, method = 'none', minsize = 1)
## clustering
gsea.clust.human <- pam(t(marker.human.vip), k = 5)
## pheatmap
annot.df <- data.frame('clust' = as.factor(gsea.clust.human$clustering), 'Cxcr7' = cpm.human.mat['ACKR3', ])
pheatmap(marker.human.vip[, names(sort(gsea.clust.human$clustering)) ], main = 'Human GSEA Clust', width = 6, height = 8, scale = 'row',
cluster_rows = FALSE, cluster_cols = FALSE, show_rownames = TRUE, show_colnames = FALSE,
color = colorRampPalette(colors = c('blue', 'white', 'red'))(100),  fontsize_row = 8,
annotation_col = annot.df)
## get average expression for each clsuter
for (i in 1:5) {
clust.cells <- which(gsea.clust$clustering == i)
mean.exp <- mean(cpm.mat['ENSMUSG00000044337', clust.cells])
print(mean.exp)
}
## get average expression for each clsuter
for (i in 1:5) {
clust.cells <- which(gsea.clust.human$clustering == i)
mean.exp <- mean(cpm.human.mat['ENSMUSG00000044337', clust.cells])
print(mean.exp)
}
## get average expression for each clsuter
for (i in 1:5) {
clust.cells <- which(gsea.clust.human$clustering == i)
mean.exp <- mean(cpm.human.mat['ACKR3', clust.cells])
print(mean.exp)
}
### MOUSE ###
raw.mat <- readRDS('C://Users/lvlah/linux/ac_lab/data/pda_olive/mouse-pda_raw.rds')
cpm.mat <- readRDS('C://Users/lvlah/linux/ac_lab/data/pda_olive/mouse-pda_cpm.rds')
rank.mat <- readRDS('C://Users/lvlah/linux/ac_lab/data/pda_olive/mouse-pda_rank.rds')
'Rdc1' %in% rownames(cpm.mat)
'Cxcr7' %in% rownames(cpm.mat)
head(rownames(cpm.mat))
'Cxcr7' %in% rownames(raw.mat)
'Rdc1' %in% rownames(raw.mat)
'Ackr3' %in% rownames(raw.mat)
'Ackr3' %in% rownames(cpm.mat)
?viperSignature
source('C://Users/lvlah/linux/ac_lab/single-cell-pipeline/functions/process-utils.R')
source('C://Users/lvlah/linux/ac_lab/single-cell-pipeline/functions/cluster-functions.R')
source('C://Users/lvlah/linux/ac_lab/single-cell-pipeline/functions/viper-utils.R')
source('C://Users/lvlah/linux/ac_lab/single-cell-pipeline/functions/process-utils.R')
source('C://Users/lvlah/linux/ac_lab/single-cell-pipeline/functions/cluster-functions.R')
source('C://Users/lvlah/linux/ac_lab/single-cell-pipeline/functions/viper-utils.R')
## PIPELINE r2
r2.pAct <- readRDS('C://Users/lvlah/linux/ac_lab/data/pda_olive/mps_r2-pAct.rds')
r2.cbcMRs <- CBCMRs(r2.pAct) # identify the most representative proteins
r2.pAct.cbc <- r2.pAct[ r2.cbcMRs ,] # filter the protein activity matrix
r2.louvain <- LouvainClust(r2.pAct.cbc) # perform clustering analysis
r2.cbcUMAP <- CustomUMAP(r2.pAct.cbc)
ClusterScatter(r2.cbcUMAP, r2.louvain, 'Viper Clustering (Louvain)')
m.set
marker.sets
markers <- c('Ackr3', marker.sets$endothelial)
markers
markers <- c('Ackr3', lapply(marker.sets$endothelial, function(x) { paste(substr(x, 1, 1), tolower(substr(x, 2, nchar(x))), sep = '') })
)
markers
markers <- c('Ackr3', unlist( lapply(marker.sets$endothelial, function(x)
{ paste(substr(x, 1, 1), tolower(substr(x, 2, nchar(x))), sep = '') })))
markers
MarkerGrid(r2.cbcUMAP, r2.louvain, r2.pAct, markers, 'Endothelial Marker Activity')
source('C://Users/lvlah/linux/ac_lab/single-cell-pipeline/functions/process-utils.R')
source('C://Users/lvlah/linux/ac_lab/single-cell-pipeline/functions/cluster-functions.R')
source('C://Users/lvlah/linux/ac_lab/single-cell-pipeline/functions/viper-utils.R')
MarkerGrid(r2.cbcUMAP, r2.louvain, r2.pAct, markers, 'Endothelial Marker Activity')
source('C://Users/lvlah/linux/ac_lab/single-cell-pipeline/functions/process-utils.R')
source('C://Users/lvlah/linux/ac_lab/single-cell-pipeline/functions/cluster-functions.R')
source('C://Users/lvlah/linux/ac_lab/single-cell-pipeline/functions/viper-utils.R')
MarkerGrid(r2.cbcUMAP, r2.louvain, r2.pAct, markers, 'Endothelial Marker Activity')
source('C://Users/lvlah/linux/ac_lab/single-cell-pipeline/functions/process-utils.R')
source('C://Users/lvlah/linux/ac_lab/single-cell-pipeline/functions/cluster-functions.R')
source('C://Users/lvlah/linux/ac_lab/single-cell-pipeline/functions/viper-utils.R')
MarkerGrid(r2.cbcUMAP, r2.louvain, r2.pAct, markers, 'Endothelial Marker Activity')
dev.off()
MarkerGrid(r2.cbcUMAP, r2.louvain, r2.pAct, markers, 'Endothelial Marker Activity')
source('C://Users/lvlah/linux/ac_lab/single-cell-pipeline/functions/cluster-functions.R'\
source('C://Users/lvlah/linux/ac_lab/single-cell-pipeline/functions/cluster-functions.R'
)
MarkerGrid(r2.cbcUMAP, r2.louvain, r2.pAct, markers, 'Endothelial Marker Activity')
source('C://Users/lvlah/linux/ac_lab/single-cell-pipeline/functions/cluster-functions.R')
MarkerGrid(r2.cbcUMAP, r2.louvain, r2.pAct, markers, 'Endothelial Marker Activity')
length(markers)
source('C://Users/lvlah/linux/ac_lab/single-cell-pipeline/functions/cluster-functions.R')
length(markers)
MarkerGrid(r2.cbcUMAP, r2.louvain, r2.pAct, markers, 'Endothelial Marker Activity')
markers <- c('Ackr3', unlist( lapply(marker.sets$epithelial, function(x)
{ paste(substr(x, 1, 1), tolower(substr(x, 2, nchar(x))), sep = '') })))
MarkerGrid(r2.cbcUMAP, r2.louvain, r2.pAct, markers, 'Epithelial Marker Activity')
source('C://Users/lvlah/linux/ac_lab/single-cell-pipeline/functions/cluster-functions.R')
markers <- c('Ackr3', unlist( lapply(marker.sets$endothelial, function(x)
{ paste(substr(x, 1, 1), tolower(substr(x, 2, nchar(x))), sep = '') })))
MarkerGrid(r2.cbcUMAP, r2.louvain, r2.pAct, markers, 'Endothelial Marker Activity')
markers <- c('Ackr3', unlist( lapply(marker.sets$epithelial, function(x)
{ paste(substr(x, 1, 1), tolower(substr(x, 2, nchar(x))), sep = '') })))
MarkerGrid(r2.cbcUMAP, r2.louvain, r2.pAct, markers, 'Epithelial Marker Activity')
markers <- c('Ackr3', unlist( lapply(marker.sets$fibroblast, function(x)
{ paste(substr(x, 1, 1), tolower(substr(x, 2, nchar(x))), sep = '') })))
MarkerGrid(r2.cbcUMAP, r2.louvain, r2.pAct, markers, 'Fibroblast Marker Activity')
markers <- c('Ackr3', unlist( lapply(marker.sets$immune, function(x)
{ paste(substr(x, 1, 1), tolower(substr(x, 2, nchar(x))), sep = '') })))
MarkerGrid(r2.cbcUMAP, r2.louvain, r2.pAct, markers, 'Immune Marker Activity')
markers <- c('Ackr3', unlist( lapply(marker.sets$pericytes, function(x)
{ paste(substr(x, 1, 1), tolower(substr(x, 2, nchar(x))), sep = '') })))
MarkerGrid(r2.cbcUMAP, r2.louvain, r2.pAct, markers, 'Pericyte Marker Activity')
devtools::install_github("xu-lab/SLICE")
devtools::install_github("xu-lab/SLICE")
Sys.getenv("R_LIBS_USER")
##packages and wd
source('C://Users/lvlah/linux/ac_lab/single-cell-pipeline/functions/cluster-functions.R')
source('C://Users/lvlah/linux/ac_lab/single-cell-pipeline/functions/viper-utils.R')
source('C://Users/lvlah/linux/ac_lab/single-cell-pipeline/functions/process-utils.R')
mt.genes <- read.table('C://Users/lvlah/linux/ac_lab/single-cell-pipeline/mt-genes.csv',
header = TRUE, sep = ',', stringsAsFactors = FALSE)
library(SingleR)
devtools::install_github('dviraran/SingleR')
install.packages('rlang')
devtools::install_github('dviraran/SingleR')
devtools::install_github('dviraran/SingleR')
##packages and wd
library(PISCES)
library(Seurat)
library(viper)
library(ggplot2)
library(ggpubr)
library(pheatmap)
library(RColorBrewer)
library(stringr)
library(cluster)
library(SingleR)
setwd('C://Users/lvlah/linux/ac_lab/yan-colab/')
set.seed('343')
name.list <- c('kr1-2', 'kr3-4', 'kr9-11', 'kr10-12')
## anchored cyto plots
for (nl in name.list) {
print(nl)
# load objects
seurat.obj <- readRDS(paste(nl, '/seurat_anchored/', nl, '_anch-seurat-obj.rds', sep = ''))
cyto.obj <- readRDS(paste(nl, '/seurat_anchored/', nl, '_anch-cyto-obj.rds', sep = ''))
cyto.vect <- cyto.obj$CytoTRACE
# make plot dat
seurat.umap <- seurat.obj@reductions$umap@cell.embeddings
seurat.plot.dat <- data.frame('UMAP1' = seurat.umap[,1], 'UMAP2' = seurat.umap[,2],
'CytoTRACE' = cyto.vect[rownames(seurat.umap)])
# save plot
jpeg(paste(nl, '/seurat_anchored/', nl, '_cyto.jpg', sep = ''), width = 800, height = 800)
print(ggplot(seurat.plot.dat, aes(UMAP1, UMAP2)) + geom_point(aes(color = CytoTRACE)) +
scale_color_gradient2(low = 'blue', high = 'red', mid = 'grey', midpoint = 0.5) +
ggtitle(paste(toupper(nl), ': CytoTRACE', sep = '')))
dev.off()
}
## unanchored cyto plots
for (nl in name.list) {
print(nl)
# load objects
seurat.obj <- readRDS(paste(nl, '/seurat_unanchored/', nl, '_seurat-obj.rds', sep = ''))
cyto.obj <- readRDS(paste(nl, '/seurat_unanchored/', nl, '_cyto-obj.rds', sep = ''))
cyto.vect <- cyto.obj$CytoTRACE
# make plot dat
seurat.umap <- seurat.obj@reductions$umap@cell.embeddings
seurat.plot.dat <- data.frame('UMAP1' = seurat.umap[,1], 'UMAP2' = seurat.umap[,2],
'CytoTRACE' = cyto.vect[rownames(seurat.umap)])
# save plot
jpeg(paste(nl, '/seurat_unanchored/', nl, '_cyto.jpg', sep = ''), width = 800, height = 800)
print(ggplot(seurat.plot.dat, aes(UMAP1, UMAP2)) + geom_point(aes(color = CytoTRACE)) +
scale_color_gradient2(low = 'blue', high = 'red', mid = 'grey', midpoint = 0.5) +
ggtitle(paste(toupper(nl), ': CytoTRACE', sep = '')))
dev.off()
}
### anchored
###############
pooled.name <- 'kr1-2'
anch.seurat.obj <- readRDS(paste(nl, '/seurat_anchored/', nl, '_anch-seurat-obj.rds', sep = ''))
## get otpimal clustering
opt.clust <- which.max(anch.seurat.obj@misc$spd.louvain.sil.scores)
opt.clust
anch.seurat.obj@misc$spd.louvain.sil.scores
opt.clust
dim(anch.seurat.obj@misc$sct.pearson.dist)
## make meta cells
count.mat <- anch.seurat.obj@assays$RNA@counts
dist.mat <- anch.seurat.obj@misc$sct.pearson.dist
meta.mats <- MetaCells(count.mat, dist.mat, clust.vect)
## get otpimal clustering
opt.clust <- which.max(anch.seurat.obj@misc$spd.louvain.sil.scores)
clust.vect <- anch.seurat.obj@meta.data$integrated_snn_res.0.08
head(clust.vect)
length(clust.vect)
dim(anch.seurat.obj@meta.data)
clust.vect <- as.numeric(anch.seurat.obj@meta.data$integrated_snn_res.0.08)
names(clust.vect) <- rownames(anch.seurat.obj@meta.data)
head(clust.vect)
table(clust.vect)
seurat.plot.dat <- data.frame('UMAP1' = seurat.umap[,1], 'UMAP2' = seurat.umap[,2],
'cluster' = clust.vect)
## make plot dat
seurat.umap <- anch.seurat.obj@reductions$umap@cell.embeddings
seurat.plot.dat <- data.frame('UMAP1' = seurat.umap[,1], 'UMAP2' = seurat.umap[,2],
'cluster' = clust.vect)
## plot
ggplot(seurat.plot.dat, aes(UMAP1, UMAP2)) + geom_point(aes(color = cluster))
### anchored
###############
pooled.name <- 'kr1-2'
anch.seurat.obj <- readRDS(paste(nl, '/seurat_anchored/', nl, '_anch-seurat-obj.rds', sep = ''))
## get otpimal clustering
opt.clust <- which.max(anch.seurat.obj@misc$spd.louvain.sil.scores)
clust.vect <- as.numeric(anch.seurat.obj@meta.data$integrated_snn_res.0.08)
names(clust.vect) <- rownames(anch.seurat.obj@meta.data)
## make plot dat
seurat.umap <- anch.seurat.obj@reductions$umap@cell.embeddings
seurat.plot.dat <- data.frame('UMAP1' = seurat.umap[,1], 'UMAP2' = seurat.umap[,2],
'cluster' = clust.vect)
## plot
ggplot(seurat.plot.dat, aes(UMAP1, UMAP2)) + geom_point(aes(color = cluster))
### anchored
###############
pooled.name <- 'kr1-2'
anch.seurat.obj <- readRDS(paste(pooled.name, '/seurat_anchored/', pooled.name, '_anch-seurat-obj.rds', sep = ''))
## get otpimal clustering
opt.clust <- which.max(anch.seurat.obj@misc$spd.louvain.sil.scores)
clust.vect <- as.numeric(anch.seurat.obj@meta.data$integrated_snn_res.0.08)
names(clust.vect) <- rownames(anch.seurat.obj@meta.data)
## make plot dat
seurat.umap <- anch.seurat.obj@reductions$umap@cell.embeddings
seurat.plot.dat <- data.frame('UMAP1' = seurat.umap[,1], 'UMAP2' = seurat.umap[,2],
'cluster' = clust.vect)
## plot
ggplot(seurat.plot.dat, aes(UMAP1, UMAP2)) + geom_point(aes(color = cluster))
clust.vect <- anch.seurat.obj@meta.data$integrated_snn_res.0.08
names(clust.vect) <- rownames(anch.seurat.obj@meta.data)
## make plot dat
seurat.umap <- anch.seurat.obj@reductions$umap@cell.embeddings
seurat.plot.dat <- data.frame('UMAP1' = seurat.umap[,1], 'UMAP2' = seurat.umap[,2],
'cluster' = clust.vect)
## plot
ggplot(seurat.plot.dat, aes(UMAP1, UMAP2)) + geom_point(aes(color = cluster))
table(clust.vect)
count.mat <- anch.seurat.obj@assays$RNA@counts
dist.mat <- anch.seurat.obj@misc$sct.pearson.dist
meta.mats <- MetaCells(count.mat, dist.mat, clust.vect)
dist.mat <- as.matrix(anch.seurat.obj@misc$sct.pearson.dist)
meta.mats <- MetaCells(count.mat, dist.mat, clust.vect)
dim(count.mat)
dim(dist.mat)
length(clust.vect)
## make meta cells
count.mat <- anch.seurat.obj@assays$RNA@counts
sct.mat <- anch.seurat.obj@assays$SCT@scale.data
clust.labels <- sort(unique(clus.vect))
clust.labels <- sort(unique(clust.vect))
clust.labels
## make meta cells
count.mat <- anch.seurat.obj@assays$RNA@counts
sct.mat <- anch.seurat.obj@assays$SCT@scale.data
clust.labels <- sort(unique(clust.vect))
for (cl in clust.labels) {
print(cl); clust.samps <- names(clust.vect)[which(clust.vect == cl)]
if (length(clust.samps) > 500) {
clust.counts <- count.mat[, clust.samps]
clust.sct <- sct.mat[, clust.samps]
clust.dist <- as.dist(1 - cor(clust.sct))
clust.meta <- MetaCells(clust.counts, clust.dist)
saveRDS(clust.meta, file = paste(pooled.name, '/seurat_anchored/meta-mats/', pooled.name, '_c', cl, '-k5.rds', sep = ''))
}
}
dim(count.mat)
dim(sct.mat)
head(rownames(count.mat))
head(colnames(count.mat))
dim(clust.dist)
length(clust.dist)
dim(clust.sct)
length(clust.samps)
knn.neighbors <- KNN(clust.dist, k = num.neighbors)
knn.neighbors <- KNN(clust.dist, k = 5)
dim(knn.neighbors)
imp.mat <- matrix(0, nrow = nrow(clust.mat), ncol = ncol(clust.mat))
rownames(imp.mat) <- rownames(clust.mat); colnames(imp.mat) <- colnames(clust.mat)
imp.mat <- matrix(0, nrow = nrow(clust.counts), ncol = ncol(clust.counts))
rownames(imp.mat) <- rownames(clust.counts); colnames(imp.mat) <- colnames(clust.counts)
knn.neighbors <- KNN(clust.dist, k = 5)
imp.mat <- matrix(0, nrow = nrow(clust.counts), ncol = ncol(clust.counts))
rownames(imp.mat) <- rownames(clust.counts); colnames(imp.mat) <- colnames(clust.counts)
for (j in 1:ncol(clust.counts)) {
neighbor.mat <- clust.counts[, c(j, knn.neighbors[j,])]
imp.mat[,j] <- rowSums(neighbor.mat)
}
#' Generates a KNN matrix.
#'
#' @param dist.mat Distance matrix.
#' @param k Number of neighbors. Default of 5.
#' @return A naighbor matrix with samples in rows and neighbors in columns.
#' @export
KNN <- function(dist.mat, k = 5){
dist.mat <- as.matrix(dist.mat)
n <- nrow(dist.mat)
neighbor.mat <- matrix(0L, nrow = n, ncol = k)
for (i in 1:n) {
neighbor.mat[i,] <- order(dist.mat[i,])[2:(k + 1)]
}
rownames(neighbor.mat) <- colnames(dist.mat)
return(neighbor.mat)
}
counts.mat <- anch.seurat.obj@assays$RNA@counts
dist.mat <- anch.seurat.obj@misc$sct.pearson.dist
num.neighbors <- 5; subset <- 250
clust.labels <- sort(unique(clust.vect))
clust.labels
cl <- 0
for (cl in clust.labels) { print(cl) }
clust.samps <- names(clust.vect)[which(clust.vect == cl)]
# get cluster objects
clust.counts <- counts.mat[,clust.samps]
clust.dist <- dist.mat[clust.samps, clust.samps]
dim(clust.counts)
table(clust.vect)
clust.samps <- names(clust.vect)[which(clust.vect == cl)]
length(clust.samps)
cl <- '0'
length(clust.samps)
clust.samps <- names(clust.vect)[which(clust.vect == cl)]
length(clust.samps)
dist.mat <- as.matrix(dist.mat)
# get cluster objects
clust.counts <- counts.mat[,clust.samps]
clust.dist <- dist.mat[clust.samps, clust.samps]
dim(clust.counts)
dim(clust.dist)
knn.mat <- KNN(clust.dist, k = num.neighbors)
dim(knn.mat)
head(knn.mat)
sub.samps <- sample(clust.samps, subset)
ss
ss <- sub.samps[1]
ss
# impute matrix
imp.mat <- matrix(0L, nrow = nrow(clust.counts), ncol = subset)
rownames(imp.mat) <- rownames(counts.mat); colnames(imp.mat) <- sub.samps
neighbor.vect <- c(ss, rownames(knn.mat)[knn.mat[ss,]])
neighbor.vect
ss.mat <- clust.counts[, neighbor.vect]
dim(ss.mat)
head(ss.mat)
ss.mat[1:5,]
MetaCells <- function(counts.mat, dist.mat, clust.vect, num.neighbors = 5, subset = 250, min.samps = 500) {
dist.mat <- as.matrix(dist.mat)
# dummy clustering vector if not specified
if (missing(clsut.vect)) {
clust.vect <- rep(1, ncol(counts.mat))
names(clust.vect) <- colnames(counts.mat)
}
clust.labels <- sort(unique(clust.vect))
# metacell matrix for each cluster
meta.mats <- list()
for (cl in clust.labels) {
clust.samps <- names(clust.vect)[which(clust.vect == cl)]
if (length(clust.samps) > min.samps) {
print(paste("Making metacell matrix for cluster ", cl, "...", sep = ''))
# get cluster objects
clust.counts <- counts.mat[,clust.samps]
clust.dist <- dist.mat[clust.samps, clust.samps]
knn.mat <- KNN(clust.dist, k = num.neighbors)
sub.samps <- sample(clust.samps, subset)
# impute matrix
imp.mat <- matrix(0L, nrow = nrow(clust.counts), ncol = subset)
rownames(imp.mat) <- rownames(counts.mat); colnames(imp.mat) <- sub.samps
for (ss in sub.samps) {
neighbor.vect <- c(ss, rownames(knn.mat)[knn.mat[ss,]])
ss.mat <- clust.counts[, neighbor.vect]
imp.mat[,ss] <- rowSums(ss.mat)
}
# normalize
imp.mat <- CPMTransform(imp.mat)
meta.mats[[cl]] <- imp.mat
}
}
return(meta.mats)
}
meta.mats <- MetaCells(counts.mat, dist.mat, clust.vect)
MetaCells <- function(counts.mat, dist.mat, clust.vect, num.neighbors = 5, subset = 250, min.samps = 500) {
dist.mat <- as.matrix(dist.mat)
# dummy clustering vector if not specified
if (missing(clust.vect)) {
clust.vect <- rep(1, ncol(counts.mat))
names(clust.vect) <- colnames(counts.mat)
}
clust.labels <- sort(unique(clust.vect))
# metacell matrix for each cluster
meta.mats <- list()
for (cl in clust.labels) {
clust.samps <- names(clust.vect)[which(clust.vect == cl)]
if (length(clust.samps) > min.samps) {
print(paste("Making metacell matrix for cluster ", cl, "...", sep = ''))
# get cluster objects
clust.counts <- counts.mat[,clust.samps]
clust.dist <- dist.mat[clust.samps, clust.samps]
knn.mat <- KNN(clust.dist, k = num.neighbors)
sub.samps <- sample(clust.samps, subset)
# impute matrix
imp.mat <- matrix(0L, nrow = nrow(clust.counts), ncol = subset)
rownames(imp.mat) <- rownames(counts.mat); colnames(imp.mat) <- sub.samps
for (ss in sub.samps) {
neighbor.vect <- c(ss, rownames(knn.mat)[knn.mat[ss,]])
ss.mat <- clust.counts[, neighbor.vect]
imp.mat[,ss] <- rowSums(ss.mat)
}
# normalize
imp.mat <- CPMTransform(imp.mat)
meta.mats[[cl]] <- imp.mat
}
}
return(meta.mats)
}
counts.mat <- anch.seurat.obj@assays$RNA@counts
dist.mat <- anch.seurat.obj@misc$sct.pearson.dist
meta.mats <- MetaCells(counts.mat, dist.mat, clust.vect)
length(meta.mats)
dim(meta.mats[[1]])
setwd('C://Users/lvlah/linux/ac_lab/PISCES/')
devtools::document()
